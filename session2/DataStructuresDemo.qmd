---
title: "Python Machine Learning Demo"
author: "Python Group"
format: 
    html:
        output-file: "session2.html"
        toc: true
        code-copy: true
        code-line-numbers: true
        link-external-icon: false
        link-external-newwindow: true
---

## Links

<a href="https://docs.python.org/3/tutorial/datastructures.html" class="link-block">
    <img src="../icons/csv.png" alt="Dataset">
    <p>Guide to Python Data Structures</p>
</a> <a href="" class="link-block">
    <img src="../icons/code.png" alt="File">
    <p>Download Follow Along File</p>
</a>

## Getting Started

Before doing anything else, we should first activate the conda environment we want to use. 
<details>
<summary> Refresher: How to activate conda environment </summary>
<div style="sp"></div>
From terminal, type: 
  
<div class="terminal">
\> conda activate ENVNAME
</div>
  <div style="margin: 10px 0;"></div>
When in VS code, you might get a popup message like the one below, confirming that the environment was activated:  

<div style="border-left: 4px solid #007bff; background-color: #f8f9fa; padding: 5px; margin: 5px 0;">
Selected conda environment was successfully activated, even though "(ENVNAME)" indicator may not be present in the terminal prompt. 
</div>
</details>

If we want to make sure we have the packages we'll need installed in the environment before we try to import them, we can either check on anaconda or use the terminal: 

<div class="terminal">
\> conda list
</div>
<div style="sp"></div>
Otherwise, we will get an error message if we try to import packages that are not installed. 

<details>
<summary> Refresher: How to install packages </summary>

To install packages, we can either use the "anaconda" dashboard, or we can use the command line. Make sure your environment is active before installing packages or the packages will not be available in your environment. 

To install from the command line, we open a terminal and type: 

<div class="terminal">
\> conda install {package}
</div>

or

<div class="terminal">
\> pip install {package}
</div>

If a package is not available via conda it might be available via pip. 
</details>


## Topic 1: Lists

The most important thing about lists:

In Python, lists are mutable, meaning their elements can be changed after the list is created, allowing for modification such as adding, removing, or updating items. This flexibility makes lists powerful for handling dynamic collections of data.


We will learn how to do things such as:
Create lists
Modify lists
Sort lists,
Loop over elements of a list with a for-loop or using list comprehension,
Slice a list,
Append to a list


To create a list:

```{python}


my_list=[1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]
print(my_list)


```

A list is simply a collection of objects.  We can find the length of a list using the len() function

```{python}


my_list=[1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]
len(my_list)


```



In Python, lists are objects like all other data types, and the class for lists is named 'list' with a lowercase 'L'. To transform another Python object into a list, you can use the list() function, which is essentially the constructor of the list class. This function accepts a single argument: an iterable. So, you can use it to turn any iterable, such as a range, set, or tuple, into a list of concrete values.

Aside: Python indices begin at 0.  In addition, certain built-in python functions such as range will terminate at n-1 in the second argument.


```{python}


first_range=range(5)
first_range_list=list(first_range)
print(first_range_list)

second_range=range(5,10)
second_range_list=list(second_range)
print(second_range_list)

```

Accessing Python list elements

To access an individual list element, you need to know its position. Since python starts counting at 0, the first element is in position 0, and the second element is in position 1. You can also access nested elements within a list, or access the list in reverse.

Examples using my_list from above
```{python}

print(my_list)

example_1=my_list[0]

example_2=my_list[6][1]

example_3=my_list[-1]

print(example_1, example_2, example_3)


```


Mutability of lists

Since lists are mutable objects, we can directly change their elements.

```{python}

some_list=[1,2,3]
print(some_list)

some_list[0]="hello"
print(some_list)

```


Appending an element to a list

When calling append on a list, we append an object to the end of the list:


```{python}

print(my_list)

my_list.append(5)

print(my_list)

```


Combining lists

We can combine lists with the "+" operator. This keeps the original lists intact

```{python}

list_1=[1,2,3]

list_2=['a','b','c']

combined_lists=list_1+list_2

print(combined_lists)

```

Another method is to extend one list onto another.


```{python}

list_1=[1,2,3]

list_2=['a','b','c']

list_1.extend(list_2)

print(list_1)

```



The pop() method removes and returns the last item by default unless you give it an index argument. If you're familiar with stacks, this method as well as .append() can be used to create one!

```{python}

list_1=[1,2,3]

element_1=list_1.pop()
element_2=list_1.pop(1)

print(element_1, element_2)


```


Deleting items by index

del removes an item without returning anything. In fact, you can delete any object, including the entire list, using del:

```{python}

list_1=[1,2,3]

del list_1[0]

print(list_1)
```

Deleting items by value

The .remove() method deletes a specific value from the list. This method will remove the first occurrence of the given object in a list. 

```{python}

list_1=[1,2,3]

list_1.remove(1)

print(list_1)


```

Lists vs. sets, and deleting duplicates from a list:

The difference between a list and a set is that a set is an unordered collection of distinct elements, while a list is ordered and can contain repeats of an element. Sets are denoted by curly brackets {}. We can use this knowledge to easily delete duplicates from a list, since there is no built-in method to do so.

```{python}

list_1=[1,2,3,1,2]
print(list_1)

set_1=set(list_1)
print(set_1)

list_2=list(set_1)
print (list_2)

```

Sorting a list

There are two ways to sort a list in Python:

.sort() modifies the original list itself. Nothing is returned.
sorted() returns a new list, which is a sorted version of the original list.

reverse=True: Use this parameter to sort the list in reverse order.

```{python}

number_list_1=[3,5,2,1,6,19]
number_list_1.sort()
print(number_list_1)

number_list_2=sorted(number_list_1, reverse=True)


alphabet_list_1=['a','z','e','b']
alphabet_list_1.sort()
print(alphabet_list_1)


alphabet_list_2=sorted(alphabet_list_1, reverse=True)
print(alphabet_list_2)



```



```{python}

mixed_list_1=[1,5,3,'a','c','b']
print(mixed_list_1.sort())


```


