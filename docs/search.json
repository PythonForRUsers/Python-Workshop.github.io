[
  {
    "objectID": "session3/session3.html",
    "href": "session3/session3.html",
    "title": "Python Machine Learning Demo",
    "section": "",
    "text": "Cancer Dataset\n\n  \n\nDownload Follow Along File"
  },
  {
    "objectID": "session3/session3.html#links",
    "href": "session3/session3.html#links",
    "title": "Python Machine Learning Demo",
    "section": "",
    "text": "Cancer Dataset\n\n  \n\nDownload Follow Along File"
  },
  {
    "objectID": "session3/session3.html#getting-started",
    "href": "session3/session3.html#getting-started",
    "title": "Python Machine Learning Demo",
    "section": "Getting Started",
    "text": "Getting Started\nBefore doing anything else, we should first activate the conda environment we want to use.\n\n\nRefresher: How to activate conda environment\n\n\n\n\nFrom terminal, type:\n\n&gt; conda activate ENVNAME\n\n\n\n\nWhen in VS code, you might get a popup message like the one below, confirming that the environment was activated:\n\nSelected conda environment was successfully activated, even though “(ENVNAME)” indicator may not be present in the terminal prompt.\n\n\nIf we want to make sure we have the packages we’ll need installed in the environment before we try to import them, we can either check on anaconda or use the terminal:\n\n&gt; conda list\n\n\n\n\nOtherwise, we will get an error message if we try to import packages that are not installed.\n\n\nRefresher: How to install packages\n\nTo install packages, we can either use the “anaconda” dashboard, or we can use the command line. Make sure your environment is active before installing packages or the packages will not be available in your environment.\nTo install from the command line, we open a terminal and type:\n\n&gt; conda install {package}\n\nor\n\n&gt; pip install {package}\n\nIf a package is not available via conda it might be available via pip."
  },
  {
    "objectID": "session3/session3.html#step-1-import-packages",
    "href": "session3/session3.html#step-1-import-packages",
    "title": "Python Machine Learning Demo",
    "section": "Step 1: Import Packages",
    "text": "Step 1: Import Packages\nSimilar to library() in R, we’ll use import in Python. Fill in the blanks to import the necessary packages:\n\nimport pandas as ___\nimport numpy as ___\nimport seaborn as ___\nimport matplotlib.pyplot as ___\n\n# Import from sklearn\nfrom sklearn.model_selection import __________\nfrom sklearn.preprocessing import __________\n\nfrom sklearn.linear_model import __________\n\nfrom sklearn.metrics import accuracy_score, roc_curve, auc\n\n\n\n\nClick to reveal answers\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n## import from sklearn (scikit-learn)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import accuracy_score, roc_curve, auc"
  },
  {
    "objectID": "session3/session3.html#step-2-read-in-data-and-perform-data-cleaning",
    "href": "session3/session3.html#step-2-read-in-data-and-perform-data-cleaning",
    "title": "Python Machine Learning Demo",
    "section": "Step 2: Read in Data and Perform Data Cleaning",
    "text": "Step 2: Read in Data and Perform Data Cleaning\nWe can use the read_csv() function from the pandas package to read in the dataset.\n\ndata = pd.read_csv(\"__________\")\n\n\n\n\nClick to reveal answers\n\n\ndata = pd.read_csv(\"example_data/Cancer_Data.csv\")\n\n\n\nWe can use the .info() function to show some basic information about the dataset like:\n* the number of rows\n* number of columns\n* column labels\n* column type\n* number of non-null values in each column\n\ndata._______()\n\n\n\n\nClick to reveal answers\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 569 entries, 0 to 568\nData columns (total 33 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   id                       569 non-null    int64  \n 1   diagnosis                569 non-null    object \n 2   radius_mean              569 non-null    float64\n 3   texture_mean             569 non-null    float64\n 4   perimeter_mean           569 non-null    float64\n 5   area_mean                569 non-null    float64\n 6   smoothness_mean          569 non-null    float64\n 7   compactness_mean         569 non-null    float64\n 8   concavity_mean           569 non-null    float64\n 9   concave points_mean      569 non-null    float64\n 10  symmetry_mean            569 non-null    float64\n 11  fractal_dimension_mean   569 non-null    float64\n 12  radius_se                569 non-null    float64\n 13  texture_se               569 non-null    float64\n 14  perimeter_se             569 non-null    float64\n 15  area_se                  569 non-null    float64\n 16  smoothness_se            569 non-null    float64\n 17  compactness_se           569 non-null    float64\n 18  concavity_se             569 non-null    float64\n 19  concave points_se        569 non-null    float64\n 20  symmetry_se              569 non-null    float64\n 21  fractal_dimension_se     569 non-null    float64\n 22  radius_worst             569 non-null    float64\n 23  texture_worst            569 non-null    float64\n 24  perimeter_worst          569 non-null    float64\n 25  area_worst               569 non-null    float64\n 26  smoothness_worst         569 non-null    float64\n 27  compactness_worst        569 non-null    float64\n 28  concavity_worst          569 non-null    float64\n 29  concave points_worst     569 non-null    float64\n 30  symmetry_worst           569 non-null    float64\n 31  fractal_dimension_worst  569 non-null    float64\n 32  Unnamed: 32              0 non-null      float64\ndtypes: float64(31), int64(1), object(1)\nmemory usage: 146.8+ KB\n\n\n\n\nFrom the info, we can see that the column types make sense and most of the columns have no missing values.\nWe do have this extra column called “Unnamed: 32” with 0 non-null values… so let’s drop it (remove it from the dataframe).\n\ndata.drop(columns=\"Unnamed: 32\", inplace=______)\n\n# Check that the column was removed\nprint(data.info())\n\n\n\n\nClick to reveal answers\n\n\n## `inplace` means that we modify the original dataframe\ndata.drop(columns=\"Unnamed: 32\", inplace=True)\n\n## check that the column was removed\nprint(data.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 569 entries, 0 to 568\nData columns (total 32 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   id                       569 non-null    int64  \n 1   diagnosis                569 non-null    object \n 2   radius_mean              569 non-null    float64\n 3   texture_mean             569 non-null    float64\n 4   perimeter_mean           569 non-null    float64\n 5   area_mean                569 non-null    float64\n 6   smoothness_mean          569 non-null    float64\n 7   compactness_mean         569 non-null    float64\n 8   concavity_mean           569 non-null    float64\n 9   concave points_mean      569 non-null    float64\n 10  symmetry_mean            569 non-null    float64\n 11  fractal_dimension_mean   569 non-null    float64\n 12  radius_se                569 non-null    float64\n 13  texture_se               569 non-null    float64\n 14  perimeter_se             569 non-null    float64\n 15  area_se                  569 non-null    float64\n 16  smoothness_se            569 non-null    float64\n 17  compactness_se           569 non-null    float64\n 18  concavity_se             569 non-null    float64\n 19  concave points_se        569 non-null    float64\n 20  symmetry_se              569 non-null    float64\n 21  fractal_dimension_se     569 non-null    float64\n 22  radius_worst             569 non-null    float64\n 23  texture_worst            569 non-null    float64\n 24  perimeter_worst          569 non-null    float64\n 25  area_worst               569 non-null    float64\n 26  smoothness_worst         569 non-null    float64\n 27  compactness_worst        569 non-null    float64\n 28  concavity_worst          569 non-null    float64\n 29  concave points_worst     569 non-null    float64\n 30  symmetry_worst           569 non-null    float64\n 31  fractal_dimension_worst  569 non-null    float64\ndtypes: float64(30), int64(1), object(1)\nmemory usage: 142.4+ KB\nNone\n\n\n\n\nThe column was successfully removed!\nNow, we can use .head(5) to show the first 5 rows of the dataset (rows 0-4). Remember that the first row is “0” not “1”!\n\ndata.head(5)\n\n\n\n\n\n\n\n\nid\ndiagnosis\nradius_mean\ntexture_mean\nperimeter_mean\narea_mean\nsmoothness_mean\ncompactness_mean\nconcavity_mean\nconcave points_mean\n...\nradius_worst\ntexture_worst\nperimeter_worst\narea_worst\nsmoothness_worst\ncompactness_worst\nconcavity_worst\nconcave points_worst\nsymmetry_worst\nfractal_dimension_worst\n\n\n\n\n0\n842302\nM\n17.99\n10.38\n122.80\n1001.0\n0.11840\n0.27760\n0.3001\n0.14710\n...\n25.38\n17.33\n184.60\n2019.0\n0.1622\n0.6656\n0.7119\n0.2654\n0.4601\n0.11890\n\n\n1\n842517\nM\n20.57\n17.77\n132.90\n1326.0\n0.08474\n0.07864\n0.0869\n0.07017\n...\n24.99\n23.41\n158.80\n1956.0\n0.1238\n0.1866\n0.2416\n0.1860\n0.2750\n0.08902\n\n\n2\n84300903\nM\n19.69\n21.25\n130.00\n1203.0\n0.10960\n0.15990\n0.1974\n0.12790\n...\n23.57\n25.53\n152.50\n1709.0\n0.1444\n0.4245\n0.4504\n0.2430\n0.3613\n0.08758\n\n\n3\n84348301\nM\n11.42\n20.38\n77.58\n386.1\n0.14250\n0.28390\n0.2414\n0.10520\n...\n14.91\n26.50\n98.87\n567.7\n0.2098\n0.8663\n0.6869\n0.2575\n0.6638\n0.17300\n\n\n4\n84358402\nM\n20.29\n14.34\n135.10\n1297.0\n0.10030\n0.13280\n0.1980\n0.10430\n...\n22.54\n16.67\n152.20\n1575.0\n0.1374\n0.2050\n0.4000\n0.1625\n0.2364\n0.07678\n\n\n\n\n5 rows × 32 columns\n\n\n\n\nRecoding a Variable\nFor our logistic regression, the diagnosis column, which is our outcome of interest, should be 0, 1 not B, M. To fix this, we can use a dictionary and .map().\n\n## define a dictionary\ny_recode = {\"B\": ___, \"M\": ___}\n\n## use .map to locate the keys in the column and replace with values\ndata[\"diagnosis\"] = data[\"diagnosis\"].map(________)\n\ndata.head(5)\n\n\n\n\nClick to reveal answers\n\n\n## define a dictionary\ny_recode = {\"B\": 0, \"M\": 1}\n\n## use .map() to locate the keys in the column and replace with values\n## B becomes 0, M becomes 1\ndata[\"diagnosis\"] = data[\"diagnosis\"].map(y_recode)\n\ndata.head(5)\n\n\n\n\n\n\n\n\nid\ndiagnosis\nradius_mean\ntexture_mean\nperimeter_mean\narea_mean\nsmoothness_mean\ncompactness_mean\nconcavity_mean\nconcave points_mean\n...\nradius_worst\ntexture_worst\nperimeter_worst\narea_worst\nsmoothness_worst\ncompactness_worst\nconcavity_worst\nconcave points_worst\nsymmetry_worst\nfractal_dimension_worst\n\n\n\n\n0\n842302\n1\n17.99\n10.38\n122.80\n1001.0\n0.11840\n0.27760\n0.3001\n0.14710\n...\n25.38\n17.33\n184.60\n2019.0\n0.1622\n0.6656\n0.7119\n0.2654\n0.4601\n0.11890\n\n\n1\n842517\n1\n20.57\n17.77\n132.90\n1326.0\n0.08474\n0.07864\n0.0869\n0.07017\n...\n24.99\n23.41\n158.80\n1956.0\n0.1238\n0.1866\n0.2416\n0.1860\n0.2750\n0.08902\n\n\n2\n84300903\n1\n19.69\n21.25\n130.00\n1203.0\n0.10960\n0.15990\n0.1974\n0.12790\n...\n23.57\n25.53\n152.50\n1709.0\n0.1444\n0.4245\n0.4504\n0.2430\n0.3613\n0.08758\n\n\n3\n84348301\n1\n11.42\n20.38\n77.58\n386.1\n0.14250\n0.28390\n0.2414\n0.10520\n...\n14.91\n26.50\n98.87\n567.7\n0.2098\n0.8663\n0.6869\n0.2575\n0.6638\n0.17300\n\n\n4\n84358402\n1\n20.29\n14.34\n135.10\n1297.0\n0.10030\n0.13280\n0.1980\n0.10430\n...\n22.54\n16.67\n152.20\n1575.0\n0.1374\n0.2050\n0.4000\n0.1625\n0.2364\n0.07678\n\n\n\n\n5 rows × 32 columns"
  },
  {
    "objectID": "session3/session3.html#step-3-exploratory-data-analysis",
    "href": "session3/session3.html#step-3-exploratory-data-analysis",
    "title": "Python Machine Learning Demo",
    "section": "Step 3: Exploratory Data Analysis",
    "text": "Step 3: Exploratory Data Analysis\nNow that our data is cleaned and we have our outcome in numeric form, we can use .describe() to get summary statistics for each column of the dataset.\n\n___.___()\n\n\n\n\nClick to reveal answers\n\n\ndata.describe()\n\n\n\n\n\n\n\n\nid\ndiagnosis\nradius_mean\ntexture_mean\nperimeter_mean\narea_mean\nsmoothness_mean\ncompactness_mean\nconcavity_mean\nconcave points_mean\n...\nradius_worst\ntexture_worst\nperimeter_worst\narea_worst\nsmoothness_worst\ncompactness_worst\nconcavity_worst\nconcave points_worst\nsymmetry_worst\nfractal_dimension_worst\n\n\n\n\ncount\n5.690000e+02\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n...\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n569.000000\n\n\nmean\n3.037183e+07\n0.372583\n14.127292\n19.289649\n91.969033\n654.889104\n0.096360\n0.104341\n0.088799\n0.048919\n...\n16.269190\n25.677223\n107.261213\n880.583128\n0.132369\n0.254265\n0.272188\n0.114606\n0.290076\n0.083946\n\n\nstd\n1.250206e+08\n0.483918\n3.524049\n4.301036\n24.298981\n351.914129\n0.014064\n0.052813\n0.079720\n0.038803\n...\n4.833242\n6.146258\n33.602542\n569.356993\n0.022832\n0.157336\n0.208624\n0.065732\n0.061867\n0.018061\n\n\nmin\n8.670000e+03\n0.000000\n6.981000\n9.710000\n43.790000\n143.500000\n0.052630\n0.019380\n0.000000\n0.000000\n...\n7.930000\n12.020000\n50.410000\n185.200000\n0.071170\n0.027290\n0.000000\n0.000000\n0.156500\n0.055040\n\n\n25%\n8.692180e+05\n0.000000\n11.700000\n16.170000\n75.170000\n420.300000\n0.086370\n0.064920\n0.029560\n0.020310\n...\n13.010000\n21.080000\n84.110000\n515.300000\n0.116600\n0.147200\n0.114500\n0.064930\n0.250400\n0.071460\n\n\n50%\n9.060240e+05\n0.000000\n13.370000\n18.840000\n86.240000\n551.100000\n0.095870\n0.092630\n0.061540\n0.033500\n...\n14.970000\n25.410000\n97.660000\n686.500000\n0.131300\n0.211900\n0.226700\n0.099930\n0.282200\n0.080040\n\n\n75%\n8.813129e+06\n1.000000\n15.780000\n21.800000\n104.100000\n782.700000\n0.105300\n0.130400\n0.130700\n0.074000\n...\n18.790000\n29.720000\n125.400000\n1084.000000\n0.146000\n0.339100\n0.382900\n0.161400\n0.317900\n0.092080\n\n\nmax\n9.113205e+08\n1.000000\n28.110000\n39.280000\n188.500000\n2501.000000\n0.163400\n0.345400\n0.426800\n0.201200\n...\n36.040000\n49.540000\n251.200000\n4254.000000\n0.222600\n1.058000\n1.252000\n0.291000\n0.663800\n0.207500\n\n\n\n\n8 rows × 32 columns\n\n\n\n\n\nThe count column tells us the number of non-null (non-missing) values in a column.\n\nCreating Descriptive Plots\nWe can also look at the number of each diagnosis reflected in the dataset in a plot using seaborn.\nYou can also save a plot to a variable (ex: ‘p’) if you want to display it later with plt.show(p).\n\nsns.countplot(x=\"_________\", hue=\"_________\", data=______)\nplt.title(\"Distribution of Diagnoses\")\n_____\n\n\n\n\nClick to reveal answers\n\n\nsns.countplot(x=\"diagnosis\", hue=\"diagnosis\", data=data)\nplt.title(\"Distribution of Diagnoses\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nIf we want, we can change the colors of the plot. To make the plot a bit more useful, we can also change the y-scale from “count” to “percentage” and add labels so it is clear what “0” and “1” mean.\nTo help us pick colors, we can use sns.color_palette() which will display an image with the colors in the palette.\n\nsns.color_palette(\"colorblind\")\n\n\n\n\nTo change the colors of our plot, we can make a dictionary with the values of ‘diagnosis’ as keys and the hexcodes of the colors we want to use as values.\nWe can get the hex codes of colors from a seaborn palette using sns.color_palette().as_hex().\n\ncolor_hex = sns.color_palette(\"colorblind\")._____\n\nprint(\"The hexcodes for the 'colorblind' palette are:\\n\", ____)\n\n## if we want to make the columns green for benign and yellow for malignant\n\n## the \"-\" lets us index from the end of the list rather than the front. However, the '-1'th position is the last position (there is no '-0')\n\ncolors = {0: color_hex[__], 1: color_hex[__]}\n\n\n\n\nClick to reveal answers\n\n\ncolor_hex = sns.color_palette(\"colorblind\").as_hex()\n\nprint(\"The hexcodes for the 'colorblind' palette are:\\n\", color_hex)\n\n## if we want to make the columns green for benign and yellow for malignant\n\n## the \"-\" lets us index from the end of the list rather than the front.However, the '-1'th position is the last position (there is no '-0')\n\ncolors = {0: color_hex[2], 1: color_hex[-2]}\n\nThe hexcodes for the 'colorblind' palette are:\n ['#0173b2', '#de8f05', '#029e73', '#d55e00', '#cc78bc', '#ca9161', '#fbafe4', '#949494', '#ece133', '#56b4e9']\n\n\n\n\nWe then create the plot and tell seaborn to use ‘colors’ as the palette for the graph. We can also change the ‘stat’ to be “percent”, which can be more interpretable than raw counts.\nWe can also change the xtick labels to be “Benign” and “Malignant” instead of “0” and “1”. Because we assigned the plot to the variable ‘p’, we can use p.{} to change attributes of plot ‘p’.\nWe will also change the axis labels and set a title. Once we make these changes, we can show the finished plot.\n\np = sns.countplot(\n    x=\"___\",\n    hue=\"___\",\n    stat=\"___\",\n    data=data,\n    palette=colors,\n    legend=False,\n)\n\n## change the xticklabels to benign and malignant\np.set_xticks([0, 1])\np.set_xticklabels([\"___\", \"\"])\n\n## change the axes labels and title\np.set(xlabel=\"___\", ylabel=\"___\", title=\"Distribution of Diagnoses\")\n\n## add legend\nplt.legend(title=\"Diagnosis\", loc=\"upper right\", labels=[\"Benign\", \"Malignant\"])\n\n## show plot\nplt.show(p)\n\n\n\n\nClick to reveal answers\n\n\np = sns.countplot(\n    x=\"diagnosis\",\n    hue=\"diagnosis\",\n    stat=\"percent\",\n    data=data,\n    palette=colors,\n    legend=False,\n)\n\n## change the xticklabels to benign and malignant\np.set_xticks([0, 1])\np.set_xticklabels([\"Benign\", \"Malignant\"])\n\n## change the axes labels and title\np.set(xlabel=\"Diagnosis\", ylabel=\"Percent\", title=\"Distribution of Diagnoses\")\n\n## add legend\nplt.legend(title=\"Diagnosis\", loc=\"upper right\", labels=[\"Benign\", \"Malignant\"])\n\n## show plot\nplt.show(p)\n\n\n\n\n\n\n\n\n\n\nIf we wanted to, we could also make a correlation heatmap of our features using .corr() and sns.heatmap().\nFor this, all of our columns must be numeric, and we should remove the ‘id’ column as it is not useful for correlation. We use .select_dtypes() to select only the numeric columns from the dataset.\n\nnumeric_data = data.select_dtypes(include=___)\n\n## drop id column\nnumeric_data.drop(columns=___, inplace=___)\n\n## set figure size\nplt.figure(figsize=(20, 20))\n\n## use corr function and seaborn heatmap to create correlation heatmap\n## 'fmt' allows us to choose the number display format for the heatmap\n\nsns.heatmap(numeric_data.___, annot=True, fmt=\".2f\", cmap=\"coolwarm\")\n\n## set plot title and show plot\nplt.title(\"Feature Correlation Heatmap\")\n\nplt.___\n\n\n\n\nClick to reveal answers\n\n\nnumeric_data = data.select_dtypes(include=[np.number])\n\n## drop id column\nnumeric_data.drop(columns=\"id\", inplace=True)\n\n## set figure size\nplt.figure(figsize=(20, 20))\n\n## use corr function and seaborn heatmap to create correlation heatmap\n## 'fmt' allows us to choose the number display format for the heatmap\n\nsns.heatmap(numeric_data.corr(), annot=True, fmt=\".2f\", cmap=\"coolwarm\")\n\n## set plot title and show plot\nplt.title(\"Feature Correlation Heatmap\")\n\nplt.show()"
  },
  {
    "objectID": "session3/session3.html#step-4-data-setup",
    "href": "session3/session3.html#step-4-data-setup",
    "title": "Python Machine Learning Demo",
    "section": "Step 4: Data Setup",
    "text": "Step 4: Data Setup\n\nSplitting Training and Test Data\nWe first need to split the dataset into X (predictors/features) and y (outcomes). Then we use the train_test_split() function to split these datasets into a training dataset and a test dataset.\nWe use the .loc function and “:” to select all rows and any columns including and after “radius_mean”, and we assign these columns to x. This excludes the “diagnosis” and “id” columns.\nWe set y as simply the diagnosis column.\nWhen splitting our dataset, we can define ‘test_size’ which is the proportion of the data that will be set aside for testing the model. We can also set a random_state.\n\nUnlike R, Python allows for multi-argument returns from functions. This lets us assign each returned object to a different variable to be used later!\n\n\nx = data.loc[:, \"___\"::]\n\n## set only the diagnosis column as \"y\"\ny = data.loc[:, \"___\"]\n\n## here we assign each object returned from `train_test_split` to a different variable\n## we can use test_size to set the proportion of the dataset reserved for testing\nX_?, X_?, y_?, y_? = train_test_split(\n    x, y, test_size=0.2, random_state=42\n)\n\nX_train.head(3)\n\n\n\n\nClick to reveal answers\n\n\nx = data.loc[:, \"radius_mean\"::]\n\n## set only the diagnosis column as \"y\"\ny = data.loc[:, \"diagnosis\"]\n\n## here we assign each object returned from `train_test_split` to a different variable\nX_train, X_test, y_train, y_test = train_test_split(\n    x, y, test_size=0.2, random_state=42\n)\n\nX_train.head(3)\n\n\n\n\n\n\n\n\nradius_mean\ntexture_mean\nperimeter_mean\narea_mean\nsmoothness_mean\ncompactness_mean\nconcavity_mean\nconcave points_mean\nsymmetry_mean\nfractal_dimension_mean\n...\nradius_worst\ntexture_worst\nperimeter_worst\narea_worst\nsmoothness_worst\ncompactness_worst\nconcavity_worst\nconcave points_worst\nsymmetry_worst\nfractal_dimension_worst\n\n\n\n\n68\n9.029\n17.33\n58.79\n250.5\n0.10660\n0.14130\n0.31300\n0.04375\n0.2111\n0.08046\n...\n10.31\n22.65\n65.50\n324.7\n0.14820\n0.4365\n1.2520\n0.17500\n0.4228\n0.1175\n\n\n181\n21.090\n26.57\n142.70\n1311.0\n0.11410\n0.28320\n0.24870\n0.14960\n0.2395\n0.07398\n...\n26.68\n33.48\n176.50\n2089.0\n0.14910\n0.7584\n0.6780\n0.29030\n0.4098\n0.1284\n\n\n63\n9.173\n13.86\n59.20\n260.9\n0.07721\n0.08751\n0.05988\n0.02180\n0.2341\n0.06963\n...\n10.01\n19.23\n65.59\n310.1\n0.09836\n0.1678\n0.1397\n0.05087\n0.3282\n0.0849\n\n\n\n\n3 rows × 30 columns\n\n\n\n\n\n\n\nScaling/Normalizing Data\nBecause all of our features have different scales, we need to standardize (normalize) our dataset. We can do this by creating an instance of the StandardScaler class called “scaler” and fitting that to the training data. We then use the same “scaler” to scale the test dataset.\n\n## standardize dataset\nscaler = ___()\n\n## fit the scaler to the _ data\nscaler.fit(___)\n\n## apply the scaler to the _ data and _ data\nX_train = scaler.transform(___)\nX_test = scaler.transform(___)\n\n\n\n\nClick to reveal answers\n\n\n## standardize dataset\nscaler = StandardScaler()\n\n## fit the scaler to the TRAINING data\nscaler.fit(X_train)\n\n## apply the scaler to BOTH the training and test data\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)"
  },
  {
    "objectID": "session3/session3.html#step-5-model-setup",
    "href": "session3/session3.html#step-5-model-setup",
    "title": "Python Machine Learning Demo",
    "section": "Step 5: Model Setup",
    "text": "Step 5: Model Setup\nNext we have to set up the model itself by creating an instance of the LogisticRegression model class.\n\nlr = ___\n\n\n\n\nClick to reveal answers\n\n\nlr = LogisticRegression()\n\n\n\nThen, we can fit this model to the training data.\n\n## fit to training data\nlr.___(X_train, y_train)\n\n\n\n\nClick to reveal answers\n\n\n## fit to training data\nlr.fit(X_train, y_train)\n\nLogisticRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LogisticRegression?Documentation for LogisticRegressioniFittedLogisticRegression()"
  },
  {
    "objectID": "session3/session3.html#step-6-look-at-results",
    "href": "session3/session3.html#step-6-look-at-results",
    "title": "Python Machine Learning Demo",
    "section": "Step 6: Look At Results",
    "text": "Step 6: Look At Results\nOnce the model is fit, we can use it to predict the outcome (diagnosis) based on the features of the test data.\n\nStore Results in a Dataframe\nWe can use pd.DataFrame() to create an empty pandas dataframe that we can fill with our results.\n\n## use model to predict test data\n## set up dataframe to review results\nresults = pd.___\n\n## get predicted\nresults.loc[:, 'Predicted']= lr.___(___)\n\n## get true y values for test dataset\nresults.loc[:, 'Truth'] = ___.___\n\n## get probability of being malignant\n## the output is one probability per outcome, we only want the second outcome (malignant)\nresults.loc[:, 'Probability: Malignant'] = pd.DataFrame(lr.___(X_test))[_]\n\n#results_recode = {0: \"B\", 1:\"M\"}\n#results.replace({\"Predicted\": results_recode, 'Truth': results_recode}, inplace = True)\n\nresults.head(5)\n\n\n\n\nClick to reveal answers\n\n\n## use model to predict test data\n## set up dataframe to review results\nresults = pd.DataFrame()\n\n## get predicted\nresults.loc[:, 'Predicted']= lr.predict(X_test)\n\n## get true y values for test dataset\nresults.loc[:, 'Truth'] = y_test.values\n\n## get probability of being malignant\n## the output is one probability per outcome, we only want the second outcome (malignant). The second outcome uses index 1\nresults.loc[:, 'Probability: Malignant'] = pd.DataFrame(lr.predict_proba(X_test))[1]\n\n#results_recode = {0: \"B\", 1:\"M\"}\n#results.replace({\"Predicted\": results_recode, 'Truth': results_recode}, inplace = True)\n\nresults.head(5)\n\n\n\n\n\n\n\n\nPredicted\nTruth\nProbability: Malignant\n\n\n\n\n0\n0\n0\n0.113590\n\n\n1\n1\n1\n0.999991\n\n\n2\n1\n1\n0.996921\n\n\n3\n0\n0\n0.000510\n\n\n4\n0\n0\n0.000061\n\n\n\n\n\n\n\n\n\nWe can also get a quantitative “accuracy score” that will give us an idea of how well our model predicts our outcomes.\n\naccuracy = accuracy_score(results[\"Truth\"], results[\"Predicted\"])\n\nprint(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n\nAccuracy: 97.37%\n\n\n\n\nCreate ROC curve\nAs a figure, we can create an ROC curve and use quarto chunk options to add a figure caption.\n\n## make a plot to vizualize the ROC curve\n\n## get false pos rate, true pos rate and thresholds\n## there are 3 outputs so we need 3 variables to catch them\n___, ___, ___ = roc_curve(results[\"Truth\"], results[\"Predicted\"])\n\n## get AUC data\nroc_auc = auc(___, ___)\n\n## set up plot\nplt.figure(figsize=(8, 6))\n\n## using matplotlib this time, create line plot with 2pt line weight\n## add \"ROC Curve (AUC = AUC)\" as label for orange line\n## .2f is for display formatting, lw is linewidth\nplt.plot(fpr, tpr, color=\"darkorange\", lw=2, label=f\"ROC Curve (AUC = {roc_auc:.2f})\")\n\n## create another curve, this time blue with a dashed line labeled \"Random\"\n## as in random chance.\nplt.plot(___, ___, color=\"navy\", lw=2, linestyle=\"--\", label=\"Random\")\n\n## add xlabel, ylabel and title\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\n    \"Receiver Operating Characteristic (ROC) Curve\\nAccuracy: {:.2f}%\".format(\n        accuracy * 100\n    )\n)\n\n## add legend and show plot\nplt.legend(loc=\"lower right\")\nplt.show()\n\n\n\n\nClick to reveal answers\n\n\n## make a plot to vizualize the ROC curve\n\n## get false pos rate, true pos rate and thresholds\nfpr, tpr, thresholds = roc_curve(results[\"Truth\"], results[\"Predicted\"])\n\n## get AUC data\nroc_auc = auc(fpr, tpr)\n\n## set up plot\nplt.figure(figsize=(8, 6))\n\n## using matplotlib this time, create line plot with 2pt line weight\n## add \"ROC Curve (AUC = AUC)\" as label for orange line\n## .2f is for display formatting, lw is linewidth\nplt.plot(fpr, tpr, color=\"darkorange\", lw=2, label=f\"ROC Curve (AUC = {roc_auc:.2f})\")\n\n## create another curve, this time blue with a dashed line labeled \"Random\"\n## as in random chance\nplt.plot([0, 1], [0, 1], color=\"navy\", lw=2, linestyle=\"--\", label=\"Random\")\n\n## add xlabel, ylabel and title\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\n    \"Receiver Operating Characteristic (ROC) Curve\\nAccuracy: {:.2f}%\".format(\n        accuracy * 100\n    )\n)\n\n## add legend and show plot\nplt.legend(loc=\"lower right\")\nplt.show()\n\n\n\n\nAn ROC curve for our logistic regression model\n\n\n\n\n\n\nCongratulations! You have successfully done logistic regression in Python!\n\n\nCitations\n\nIcons\nCsv icons created by rizal2109 - Flaticon Ipynb icons created by JunGSa - Flaticon Coding icons created by juicy_fish - Flaticon"
  },
  {
    "objectID": "session1/session1.html",
    "href": "session1/session1.html",
    "title": "Session 1. Python Installation",
    "section": "",
    "text": "Welcome to the first session of the Introduction to Python Workshop series!\nThis guide will you walk through the steps to install Python to your computer and work interactively with it in Visual Studio Code. After the session, you will acquire basic knowledge of the following:"
  },
  {
    "objectID": "session1/session1.html#anaconda",
    "href": "session1/session1.html#anaconda",
    "title": "Session 1. Python Installation",
    "section": "Anaconda",
    "text": "Anaconda\n\n\n\n\n\nAnaconda is an open-source distribution of Python, designed for scientific computing, data science, machine learning, and AI development.\nIt comes with a desktop application Anaconda Navigator.\nIt has the latest version of Python and ~150 pre-downloaded libraries.\nIt also comes with conda, a cross-platform package and environment manager. Conda helps install packages from the Anaconda repositories (also called “channels”). It supports more than just Python packages but numerous other programming languages like R, Java, etc.\n\n\n\nDifference between conda, miniconda, and Anaconda\n\n\nIn this tutorial, we are going to install the full Anaconda distribution and learn the features of its Anaconda Navigator desktop application. This allows us to manage packages and environments without needing to know the conda terminal commands."
  },
  {
    "objectID": "session1/session1.html#visual-studio-code",
    "href": "session1/session1.html#visual-studio-code",
    "title": "Session 1. Python Installation",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\n[image]\nVisual Studio Code (VS Code) is one of the most popular open-source code editors.\nIt supports multi-language programming and integration of project development features (e.g., Remote server connection, Git, debugging tools) via the Extensions Marketplace.\n[comparison to other IDE]"
  },
  {
    "objectID": "session1/session1.html#quarto",
    "href": "session1/session1.html#quarto",
    "title": "Session 1. Python Installation",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "session1/session1.html#creating-a-virtual-environment-with-gui",
    "href": "session1/session1.html#creating-a-virtual-environment-with-gui",
    "title": "Session 1. Python Installation",
    "section": "1.3.1 Creating a Virtual Environment (with GUI)",
    "text": "1.3.1 Creating a Virtual Environment (with GUI)\nOne option is to use the Anaconda Navigator which is a graphic user interface (GUI). This way is straightforward and does not require command line prompts."
  },
  {
    "objectID": "session1/session1.html#creating-a-virutal-environment-with-command-line",
    "href": "session1/session1.html#creating-a-virutal-environment-with-command-line",
    "title": "Session 1. Python Installation",
    "section": "1.3.2 Creating a Virutal Environment (with Command Line)",
    "text": "1.3.2 Creating a Virutal Environment (with Command Line)\n\nOnce you have conda installed. Open Anaconda Prompt (for both Windows and MacOS).\nconda create --name &lt;env-name&gt;\nReplace &lt;env-name&gt; with the name you want to give your environment.\nYou can also specify the Python version or packages you want to install.\nconda create -n &lt;env-name&gt; python=3.10 \nAnd the specific packages and their versions:\nconda create -n &lt;env-name&gt; python=3.10 scipy=0.17.3 pandas matplotlib\nActivate your environment.\nCheck your conda enviornment list."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Workshops: Intro to Python",
    "section": "",
    "text": "Welcome to the Intro to Python Workshops\nOur workshops are geared towards R and SAS users who want to explore using Python, a veratile programming language that is especially powerful for tasks like machine learning and working with large datasets.\nIn our first three sessions, we will cover installing and setting up python with anaconda, basic python datastructures, and finally a demo logistic regression model with a cancer dataset. Session videos and slides, example code, and other resources will be added to this website periodicially.\nWe value your feedback and aim to continually improve these workshops. If you have any suggestions, questions, or ideas, please feel free to share them on our GitHub Discussions page. We look forward to hearing from you!\nLinks:\n \n\nInstall Anaconda\n\n  \n\nDownload Follow Along Files\n\n\n\n\nSessions\nSession 1: Get Started with Python \nSession 3: Logistic Regression Demo"
  },
  {
    "objectID": "session3/renderme.html",
    "href": "session3/renderme.html",
    "title": "HAHAHAHAHAHAHAHAH",
    "section": "",
    "text": "I will be rendered!!\n\nprint(\"RENDER ME!\")\n\n\nWe can put html in jupyter markdown chunks???\n\n\nRefresher: How to activate conda environment\n\n\n\n\nFrom terminal, type:\n\n&gt; conda activate ENVNAME\n\n\n\n\nWhen in VS code, you might get a popup message like the one below, confirming that the environment was activated:\n\nSelected conda environment was successfully activated, even though “(ENVNAME)” indicator may not be present in the terminal prompt."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "link.html",
    "href": "link.html",
    "title": "Links",
    "section": "",
    "text": "Links for downloading and installing mentioned software/files.\n \n\nInstall Anaconda\n\n\n \n\nDownload Follow Along File"
  },
  {
    "objectID": "sessions.html",
    "href": "sessions.html",
    "title": "Sessions",
    "section": "",
    "text": "Session links\nTutorial: Get Started with Python \nGo to ML Demo"
  }
]