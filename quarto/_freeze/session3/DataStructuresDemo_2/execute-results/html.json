{
  "hash": "e74fc80d9669d2fb775e8378fe86a770",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Session 3: Intro to Pandas and great_tables\"\njupyter: python3\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    background-color: lavenderblush\n    incremental: true\n    code-copy: true\n    smaller: true\n    code-block-height: 750px\n    highlight-style: pygments\n    width: 1400\n    height: 800\n    self-contained: true\nexecute:\n  freeze: auto\n  eval: true\n  echo: true\n---\n\n\n\n\n\n## Links\n\n<a href=\"https://docs.python.org/3/tutorial/datastructures.html\" class=\"link-block\">\n    <img src=\"../icons/csv.png\" alt=\"Dataset\">\n    <p>Guide to Python Data Structures</p>\n</a> <a href=\"https://www.kaggle.com/datasets/erdemtaha/cancer-data\" class=\"link-block\">\n    <img src=\"../icons/code.png\" alt=\"File\">\n    <p>Cancer Dataset</p>\n</a>\n\n\n## Topic 5: What Is Pandas? {.scrollable background-color=\"lavenderblush\"}\n\nPandas is a powerful open-source data analysis and manipulation library in Python. It provides data structures, primarily the DataFrame and Series, which are optimized for handling and analyzing large datasets efficiently.\n\n. . .\n\nData Structures:\n\n- Series: A one-dimensional labeled array, suitable for handling single columns or rows of data.\n\n- DataFrame: A two-dimensional table with labeled axes (rows and columns), much like a spreadsheet or SQL table, allowing you to work with data in rows and columns simultaneously.\n\n. . .\n\nData Manipulation:\n\n- Pandas has functions for merging, reshaping, and aggregating datasets, which helps streamline data cleaning and preparation.\n\n- It can handle missing data, making it easy to filter or fill gaps in datasets.\n\n. . .\n\nData Analysis:\n\n- Pandas provides extensive functionality for descriptive statistics, grouping data, and handling time series.\n\n- Integrates well with other libraries, making it easy to move data between libraries like NumPy for numerical computations and Matplotlib or Seaborn for visualization.\n\n\n\n\n## Creating folders for project housekeeping {.scrollable background-color=\"lavenderblush\"}\n\n::: {#812e8772 .cell class='fragment' output-location='fragment' execution_count=1}\n``` {.python .cell-code}\n###Example Folder Structure\n'''\nproject_name/\n    data/\n        raw/\n        processed/\n    scripts/\n    results/\n    logs/\n'''\n\n#To Create folders\n\nimport os\n\n#Defining working directory\nbase_dir = \"G:\\\\dir_demo\"\n\n#Defining Project folder\nproject_name = os.path.join(base_dir, \"my_project\")\n\n# Define the subdirectories\nsubdirs = [\n    \"data/raw\",\n    \"data/processed\",\n    \"scripts\",\n    \"results\",\n    \"logs\",\n]\n\n# Create directories\nfor subdir in subdirs:\n    path = os.path.join(project_name, subdir)\n    os.makedirs(path, exist_ok=True)  #ensures no error if the folder already exists\n    print(f\"Created directory: {path}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCreated directory: G:\\dir_demo\\my_project\\data/raw\nCreated directory: G:\\dir_demo\\my_project\\data/processed\nCreated directory: G:\\dir_demo\\my_project\\scripts\nCreated directory: G:\\dir_demo\\my_project\\results\nCreated directory: G:\\dir_demo\\my_project\\logs\n```\n:::\n:::\n\n\n. . .\n\nLoading the Dataset\n\n::: {#0078df11 .cell class='fragment' output-location='fragment' execution_count=2}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\n\n# Load the dataset\ncancer_data = pd.read_csv(\"..\\\\session3\\\\example_data\\\\Cancer_Data.csv\")\n\nprint (type(cancer_data))\n\n\n# Display the first few rows of the dataset\ncancer_data.head()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>Unnamed: 32</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>842302</td>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>...</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>842517</td>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>...</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>84300903</td>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>...</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>84348301</td>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>...</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84358402</td>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>...</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 33 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Viewing Basic Information {.scrollable background-color=\"lavenderblush\"}\n\n- Checking the Dataset’s Shape\n\n. . .\n\n.shape returns a tuple with (number of rows, number of columns), which provides a basic overview of the dataset size.\n\n::: {#b110977e .cell class='fragment' output-location='fragment' execution_count=3}\n``` {.python .cell-code}\n# Display the shape of the dataset\nprint(\"Dataset Shape:\", cancer_data.shape)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataset Shape: (569, 33)\n```\n:::\n:::\n\n\n- Summarizing Column Information\n\n. . .\n\n.info() lists all columns, their data types, and counts of non-null values, helping identify any columns that may have missing data.\n\n::: {#442b0fac .cell class='fragment' output-location='fragment' execution_count=4}\n``` {.python .cell-code}\n# Display column names, data types, and non-null counts\ncancer_data.info()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 569 entries, 0 to 568\nData columns (total 33 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   id                       569 non-null    int64  \n 1   diagnosis                569 non-null    object \n 2   radius_mean              569 non-null    float64\n 3   texture_mean             569 non-null    float64\n 4   perimeter_mean           569 non-null    float64\n 5   area_mean                569 non-null    float64\n 6   smoothness_mean          569 non-null    float64\n 7   compactness_mean         569 non-null    float64\n 8   concavity_mean           569 non-null    float64\n 9   concave points_mean      569 non-null    float64\n 10  symmetry_mean            569 non-null    float64\n 11  fractal_dimension_mean   569 non-null    float64\n 12  radius_se                569 non-null    float64\n 13  texture_se               569 non-null    float64\n 14  perimeter_se             569 non-null    float64\n 15  area_se                  569 non-null    float64\n 16  smoothness_se            569 non-null    float64\n 17  compactness_se           569 non-null    float64\n 18  concavity_se             569 non-null    float64\n 19  concave points_se        569 non-null    float64\n 20  symmetry_se              569 non-null    float64\n 21  fractal_dimension_se     569 non-null    float64\n 22  radius_worst             569 non-null    float64\n 23  texture_worst            569 non-null    float64\n 24  perimeter_worst          569 non-null    float64\n 25  area_worst               569 non-null    float64\n 26  smoothness_worst         569 non-null    float64\n 27  compactness_worst        569 non-null    float64\n 28  concavity_worst          569 non-null    float64\n 29  concave points_worst     569 non-null    float64\n 30  symmetry_worst           569 non-null    float64\n 31  fractal_dimension_worst  569 non-null    float64\n 32  Unnamed: 32              0 non-null      float64\ndtypes: float64(31), int64(1), object(1)\nmemory usage: 146.8+ KB\n```\n:::\n:::\n\n\n. . .\n\nViewing Column Names\n\n. . .\n\n.columns lists column headers, while .tolist() converts it into a standard Python list for easier viewing.\n\n::: {#fd9dfee4 .cell class='fragment' output-location='fragment' execution_count=5}\n``` {.python .cell-code}\n# Display column names\nprint(\"Column Names:\", cancer_data.columns.tolist())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn Names: ['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32']\n```\n:::\n:::\n\n\n## Summary Statistics {.scrollable background-color=\"lavenderblush\"}\n\n. . .\n\n.describe() generates essential statistics (mean, std, min, max, percentiles) for numeric columns, useful for identifying data distributions.\n\n::: {#321ea023 .cell class='fragment' output-location='fragment' execution_count=6}\n``` {.python .cell-code}\n# Generate summary statistics for numeric columns\ncancer_data.describe()\n\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>Unnamed: 32</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.690000e+02</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>...</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>569.000000</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.037183e+07</td>\n      <td>14.127292</td>\n      <td>19.289649</td>\n      <td>91.969033</td>\n      <td>654.889104</td>\n      <td>0.096360</td>\n      <td>0.104341</td>\n      <td>0.088799</td>\n      <td>0.048919</td>\n      <td>0.181162</td>\n      <td>...</td>\n      <td>25.677223</td>\n      <td>107.261213</td>\n      <td>880.583128</td>\n      <td>0.132369</td>\n      <td>0.254265</td>\n      <td>0.272188</td>\n      <td>0.114606</td>\n      <td>0.290076</td>\n      <td>0.083946</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.250206e+08</td>\n      <td>3.524049</td>\n      <td>4.301036</td>\n      <td>24.298981</td>\n      <td>351.914129</td>\n      <td>0.014064</td>\n      <td>0.052813</td>\n      <td>0.079720</td>\n      <td>0.038803</td>\n      <td>0.027414</td>\n      <td>...</td>\n      <td>6.146258</td>\n      <td>33.602542</td>\n      <td>569.356993</td>\n      <td>0.022832</td>\n      <td>0.157336</td>\n      <td>0.208624</td>\n      <td>0.065732</td>\n      <td>0.061867</td>\n      <td>0.018061</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>8.670000e+03</td>\n      <td>6.981000</td>\n      <td>9.710000</td>\n      <td>43.790000</td>\n      <td>143.500000</td>\n      <td>0.052630</td>\n      <td>0.019380</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.106000</td>\n      <td>...</td>\n      <td>12.020000</td>\n      <td>50.410000</td>\n      <td>185.200000</td>\n      <td>0.071170</td>\n      <td>0.027290</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.156500</td>\n      <td>0.055040</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>8.692180e+05</td>\n      <td>11.700000</td>\n      <td>16.170000</td>\n      <td>75.170000</td>\n      <td>420.300000</td>\n      <td>0.086370</td>\n      <td>0.064920</td>\n      <td>0.029560</td>\n      <td>0.020310</td>\n      <td>0.161900</td>\n      <td>...</td>\n      <td>21.080000</td>\n      <td>84.110000</td>\n      <td>515.300000</td>\n      <td>0.116600</td>\n      <td>0.147200</td>\n      <td>0.114500</td>\n      <td>0.064930</td>\n      <td>0.250400</td>\n      <td>0.071460</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.060240e+05</td>\n      <td>13.370000</td>\n      <td>18.840000</td>\n      <td>86.240000</td>\n      <td>551.100000</td>\n      <td>0.095870</td>\n      <td>0.092630</td>\n      <td>0.061540</td>\n      <td>0.033500</td>\n      <td>0.179200</td>\n      <td>...</td>\n      <td>25.410000</td>\n      <td>97.660000</td>\n      <td>686.500000</td>\n      <td>0.131300</td>\n      <td>0.211900</td>\n      <td>0.226700</td>\n      <td>0.099930</td>\n      <td>0.282200</td>\n      <td>0.080040</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8.813129e+06</td>\n      <td>15.780000</td>\n      <td>21.800000</td>\n      <td>104.100000</td>\n      <td>782.700000</td>\n      <td>0.105300</td>\n      <td>0.130400</td>\n      <td>0.130700</td>\n      <td>0.074000</td>\n      <td>0.195700</td>\n      <td>...</td>\n      <td>29.720000</td>\n      <td>125.400000</td>\n      <td>1084.000000</td>\n      <td>0.146000</td>\n      <td>0.339100</td>\n      <td>0.382900</td>\n      <td>0.161400</td>\n      <td>0.317900</td>\n      <td>0.092080</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.113205e+08</td>\n      <td>28.110000</td>\n      <td>39.280000</td>\n      <td>188.500000</td>\n      <td>2501.000000</td>\n      <td>0.163400</td>\n      <td>0.345400</td>\n      <td>0.426800</td>\n      <td>0.201200</td>\n      <td>0.304000</td>\n      <td>...</td>\n      <td>49.540000</td>\n      <td>251.200000</td>\n      <td>4254.000000</td>\n      <td>0.222600</td>\n      <td>1.058000</td>\n      <td>1.252000</td>\n      <td>0.291000</td>\n      <td>0.663800</td>\n      <td>0.207500</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n. . .\n\nUsing value_counts() on a Single Column\n\nThis method is straightforward if you want to check the frequency distribution of one specific categorical column. Returns a pandas series object\n\n::: {#d0fa1343 .cell class='fragment' output-location='fragment' execution_count=7}\n``` {.python .cell-code}\n# Count occurrences of each unique value in the 'diagnosis' column\ndiagnosis_counts = cancer_data['diagnosis'].value_counts()\nprint(\"Diagnosis Counts:\\n\", diagnosis_counts)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDiagnosis Counts:\n diagnosis\nB    357\nM    212\nName: count, dtype: int64\n```\n:::\n:::\n\n\n. . .\n\nTo see summary statistics grouped by a categorical variable in pandas, you can use the groupby() method along with describe() or specific aggregation functions like mean(), sum(), etc.\n\n::: {#b74722bc .cell class='fragment' output-location='fragment' execution_count=8}\n``` {.python .cell-code}\n# Group by 'diagnosis' and get summary statistics for each group\ngrouped_summary = cancer_data.groupby('diagnosis').mean()\nprint(grouped_summary)\n\n\n#Group by 'diagnosis' and get summary statistics for only one variable\ngrouped_radius_mean = cancer_data.groupby('diagnosis')['radius_mean'].mean()\nprint(grouped_radius_mean)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     id  radius_mean  texture_mean  perimeter_mean  \\\ndiagnosis                                                            \nB          2.654382e+07    12.146524     17.914762       78.075406   \nM          3.681805e+07    17.462830     21.604906      115.365377   \n\n            area_mean  smoothness_mean  compactness_mean  concavity_mean  \\\ndiagnosis                                                                  \nB          462.790196         0.092478          0.080085        0.046058   \nM          978.376415         0.102898          0.145188        0.160775   \n\n           concave points_mean  symmetry_mean  ...  texture_worst  \\\ndiagnosis                                      ...                  \nB                     0.025717       0.174186  ...      23.515070   \nM                     0.087990       0.192909  ...      29.318208   \n\n           perimeter_worst   area_worst  smoothness_worst  compactness_worst  \\\ndiagnosis                                                                      \nB                87.005938   558.899440          0.124959           0.182673   \nM               141.370330  1422.286321          0.144845           0.374824   \n\n           concavity_worst  concave points_worst  symmetry_worst  \\\ndiagnosis                                                          \nB                 0.166238              0.074444        0.270246   \nM                 0.450606              0.182237        0.323468   \n\n           fractal_dimension_worst  Unnamed: 32  \ndiagnosis                                        \nB                         0.079442          NaN  \nM                         0.091530          NaN  \n\n[2 rows x 32 columns]\ndiagnosis\nB    12.146524\nM    17.462830\nName: radius_mean, dtype: float64\n```\n:::\n:::\n\n\n## Renaming Columns {.scrollable background-color=\"lavenderblush\"}\n\nTo make column names more readable or consistent, you can use rename() to change specific names. Here’s how to rename columns like radius_mean to Radius Mean.\n\n::: {#c8e35e96 .cell class='fragment' output-location='fragment' execution_count=9}\n``` {.python .cell-code}\n# Rename specific columns for readability. 'old': 'new'\n\nnew_columns={\n    'radius_mean': 'Radius Mean',\n    'texture_mean': 'Texture Mean',\n    'perimeter_mean': 'Perimeter Mean'\n}\n\ncancer_data = cancer_data.rename(columns=new_columns)\n\n# Display the new column names to verify the changes\nprint(\"\\nUpdated Column Names:\", cancer_data.columns.tolist())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nUpdated Column Names: ['id', 'diagnosis', 'Radius Mean', 'Texture Mean', 'Perimeter Mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32']\n```\n:::\n:::\n\n\n## Missing values in Python {.scrollable background-color=\"lavenderblush\"}\n\n\nMissing values are common in data analysis. Python provides multiple ways to represent missing values, including `None`, `np.nan`, and `pd.NA`. Understanding their behavior is crucial for data cleaning, processing, and analysis.\n\n. . .\n\nMissing Values in Python: `None`\n\n- **Definition**: `None` is a built-in Python object representing \"no value.\"\n- **Use Cases**: Works with general Python objects but does **not** support mathematical operations.\n\n::: {#965ff5f5 .cell class='fragment' output-location='fragment' execution_count=10}\n``` {.python .cell-code}\nx = None\nif x is None:  # Best practice\n    print(\"x is missing\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is missing\n```\n:::\n:::\n\n\n. . .\n\n**Issue with `None` in arithmetic**:\n\n::: {#fd3fb769 .cell class='fragment' output-location='fragment' execution_count=11}\n``` {.python .cell-code}\ntry: \n    print(x + 1)\nexcept TypeError: \n    print(\"TypeError: Unsupported operand type(s)\")  # TypeError: unsupported operand type(s)\nprint(x==x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTypeError: Unsupported operand type(s)\nTrue\n```\n:::\n:::\n\n\n## Missing Values in NumPy: `np.nan` {.scrollable background-color=\"lavenderblush\"}\n\n- `np.nan` represents missing values in numerical computations.\n- `np.nan` is a floating-point value (`float64`).\n- Cannot be checked with `==` because `np.nan != np.nan`.\n\n::: {#278fed3f .cell class='fragment' output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nimport numpy as np\nx = np.nan\nif np.isnan(x):  # Correct way to check for np.nan\n    print(\"x is missing\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is missing\n```\n:::\n:::\n\n\n- Behavior in Math Operations\n\n::: {#10ef25ea .cell class='fragment' output-location='fragment' execution_count=13}\n``` {.python .cell-code}\nprint(x + 10)  # Output: nan\nprint(x == x)  # Output: False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnan\nFalse\n```\n:::\n:::\n\n\n## Missing Values in Pandas: `pd.NA` {.scrollable background-color=\"lavenderblush\"}\n\n- `pd.NA` is Pandas' missing value representation, introduced in Pandas 1.0.\n- Works with nullable data types (`Int64`, `Float64`, `boolean`, `string`).\n- Avoids automatic type conversion (e.g., integers remain integers).\n\n\n- Behavior in Math Operations\n\n::: {#762ac628 .cell class='fragment' output-location='fragment' execution_count=14}\n``` {.python .cell-code}\nimport pandas as pd\nx = pd.NA\nprint(x+1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<NA>\n```\n:::\n:::\n\n\n::: {#5802b635 .cell class='fragment' output-location='fragment' execution_count=15}\n``` {.python .cell-code}\n#Checking for missingness \n\n\nx = pd.NA\nif pd.isna(x):  # Correct way\n    print(\"x is missing\")\n\ntry:   \n    if x==pd.na:\n        print(x)\nexcept AttributeError:\n    print('#Incorrect way: if x=pd.NA')\n\nprint(x==x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is missing\n#Incorrect way: if x=pd.NA\n<NA>\n```\n:::\n:::\n\n\n## Comparing `None`, `np.nan`, and `pd.NA` {.scrollable background-color=\"lavenderblush\"}\n\n| Feature               | `None`              | `np.nan`                  | `pd.NA`                  |\n|-----------------------|---------------------|---------------------------|--------------------------|\n| **Type**              | `NoneType`          | `float64`                 | Special Pandas scalar    |\n| **Use Case**          | General Python      | NumPy/Pandas numeric data | Pandas nullable types    |\n| **Arithmetic Ops**    | Fails (`None + 1`)  | Works but returns `nan`   | Works but returns `<NA>` |\n| **Comparison (`==`)** |`None == None → True`| `np.nan == np.nan → False`| `pd.NA == pd.NA → <NA> ` |\n| **Check Method**      | `if x is None:`     | `if np.isnan(x):`         | `if pd.isna(x):`         |\n\n---\n\n## Handling Missing Values in Pandas {.scrollable background-color=\"lavenderblush\"}\n\n::: {#cd98d11c .cell class='fragment' output-location='fragment' execution_count=16}\n``` {.python .cell-code}\nimport numpy as np\ndf = pd.DataFrame({\"A\": [1, np.nan, 3, None, pd.NA]})\nprint(df.isna())  # Identifies missing values\nfor x in df.iloc[:, 0]:\n    print(type(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       A\n0  False\n1   True\n2  False\n3   True\n4   True\n<class 'int'>\n<class 'float'>\n<class 'int'>\n<class 'NoneType'>\n<class 'pandas._libs.missing.NAType'>\n```\n:::\n:::\n\n\n. . .\n\nFilling Missing Values\n\n::: {#a0798476 .cell class='fragment' output-location='fragment' execution_count=17}\n``` {.python .cell-code}\ndf[\"A\"]=df[\"A\"].fillna(pd.NA).astype('Float64')  # Replaces missing values with pd.NA, and then changes the column type to 'FLoat64, pandas' nullable float datatype.\nfor value in df.iloc[:,0]:\n        print(value)\n        print(type(value))\n\nprint(df[\"A\"].dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0\n<class 'numpy.float64'>\n<NA>\n<class 'pandas._libs.missing.NAType'>\n3.0\n<class 'numpy.float64'>\n<NA>\n<class 'pandas._libs.missing.NAType'>\n<NA>\n<class 'pandas._libs.missing.NAType'>\nFloat64\n```\n:::\n:::\n\n\n. . .\n\nMake sure you typecast the column as a pandas nullable data type.\n\n::: {#f777c7e1 .cell class='fragment' output-location='fragment' execution_count=18}\n``` {.python .cell-code}\ndf[\"A\"]=df[\"A\"].astype('float64')  #typecasting as lowercase \"float\" changes all pd.NA back to np.nan because \"float64\" (lowercase) is not supported by pd.NA\nfor value in df.iloc[:,0]:\n        print(value)\n        print(type(value))\n\nprint(df[\"A\"].dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0\n<class 'float'>\nnan\n<class 'float'>\n3.0\n<class 'float'>\nnan\n<class 'float'>\nnan\n<class 'float'>\nfloat64\n```\n:::\n:::\n\n\n## Dropping Missing Values {.scrollable background-color=\"lavenderblush\"}\n\n::: {#9065dc55 .cell class='fragment' output-location='fragment' execution_count=19}\n``` {.python .cell-code}\ndf=df.dropna()\nprint(df[\"A\"])\n# Removes rows with missing values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    1.0\n2    3.0\nName: A, dtype: float64\n```\n:::\n:::\n\n\n## Best Practices {.scrollable background-color=\"lavenderblush\"}\n\n- Use `None` for general Python objects.  \n- Use `np.nan` for numerical missing values in NumPy.  \n- Use `pd.NA` for missing values in Pandas with nullable data types.  \n- Always use `isna()` or `isnull()` when working with missing data in Pandas.\n\n## Other Pandas Nullable Data Types {.scrollable background-color=\"lavenderblush\"}\n\n| Pandas Nullable Data Type | Description                              | Typical Usage                      |\n|---------------------------|------------------------------------------|------------------------------------|\n| `Int8`, `Int16`, `Int32`, `Int64` | Nullable integer types (can hold `pd.NA`) | Use when you want integers with missing values |\n| `Float32`, `Float64`      | Nullable float types (standard floats also support `NaN`) | Numeric data with decimals, missing values |\n| `boolean`                 | Nullable Boolean type (`True`, `False`, `pd.NA`) | Binary categories with missing info |\n| `string`                  | Pandas string data type (nullable)       | Text data with potential nulls     |\n| `category`                | Categorical type (can include `NaN` or `pd.NA`) | Categorical data, efficient storage |\n| `datetime64[ns]` with `pd.NaT` | Datetime with nanosecond precision       | Time series, datetime columns      |\n| `timedelta64[ns]` with `pd.NaT` | Timedeltas (differences between datetimes) | Duration calculations              |\n\n\n\n## More on missing values {.scrollable background-color=\"lavenderblush\"}\n\nTo find missing values, you can use isnull() with sum() to calculate the total number of missing values in each column.\n\n::: {#6a8da188 .cell class='fragment' output-location='fragment' execution_count=20}\n``` {.python .cell-code}\n# Count missing values in each column\nmissing_values = cancer_data.isnull().sum()\nprint(\"Missing Values per Column:\")\nprint(missing_values)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMissing Values per Column:\nid                           0\ndiagnosis                    0\nRadius Mean                  0\nTexture Mean                 0\nPerimeter Mean               0\narea_mean                    0\nsmoothness_mean              0\ncompactness_mean             0\nconcavity_mean               0\nconcave points_mean          0\nsymmetry_mean                0\nfractal_dimension_mean       0\nradius_se                    0\ntexture_se                   0\nperimeter_se                 0\narea_se                      0\nsmoothness_se                0\ncompactness_se               0\nconcavity_se                 0\nconcave points_se            0\nsymmetry_se                  0\nfractal_dimension_se         0\nradius_worst                 0\ntexture_worst                0\nperimeter_worst              0\narea_worst                   0\nsmoothness_worst             0\ncompactness_worst            0\nconcavity_worst              0\nconcave points_worst         0\nsymmetry_worst               0\nfractal_dimension_worst      0\nUnnamed: 32                569\ndtype: int64\n```\n:::\n:::\n\n\n. . .\n\nDropping Columns with Excessive Missing Data\nSince Unnamed: 32 has no data, it can be dropped from the DataFrame using .drop().\n\n::: {#030f91dd .cell class='fragment' output-location='fragment' execution_count=21}\n``` {.python .cell-code}\n# Drop the 'Unnamed: 32' column if it contains no data\ncancer_data = cancer_data.drop(columns=['Unnamed: 32'])\n\n# Verify the column has been dropped\nprint(\"\\nColumns after dropping 'Unnamed: 32':\", cancer_data.columns.tolist())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nColumns after dropping 'Unnamed: 32': ['id', 'diagnosis', 'Radius Mean', 'Texture Mean', 'Perimeter Mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst']\n```\n:::\n:::\n\n\n## Column Selection {.scrollable background-color=\"lavenderblush\"}\n\nSelecting specific columns is essential for focusing on particular aspects of the dataset. Here are some examples of both single and multiple column selections.\n\n::: {#f92bcd3e .cell class='fragment' output-location='fragment' execution_count=22}\n``` {.python .cell-code}\n# Select the 'diagnosis' column - diagnosis_column will be a series\ndiagnosis_column = cancer_data['diagnosis']\nprint(\"Diagnosis Column:\\n\", diagnosis_column.head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDiagnosis Column:\n 0    M\n1    M\n2    M\n3    M\n4    M\nName: diagnosis, dtype: object\n```\n:::\n:::\n\n\n. . . \n\nAlternatively, you can select multiple columns.\n\n::: {#a2c7344d .cell class='fragment' output-location='fragment' execution_count=23}\n``` {.python .cell-code}\n# Select multiple columns: 'diagnosis', 'radius_mean', and 'area_mean' - selected_columns will be a pandas DataFrame\n\nselected_columns = cancer_data[['diagnosis', 'Radius Mean', 'area_mean']]\nprint(\"Selected Columns:\\n\", selected_columns.head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelected Columns:\n   diagnosis  Radius Mean  area_mean\n0         M        17.99     1001.0\n1         M        20.57     1326.0\n2         M        19.69     1203.0\n3         M        11.42      386.1\n4         M        20.29     1297.0\n```\n:::\n:::\n\n\n## Row Selection {.scrollable background-color=\"lavenderblush\"}\nSelecting rows based on labels or positions is helpful for inspecting specific data points or subsets.\n\n. . .\n\nLabel-Based Indexing with loc\n\n. . .\n\nloc allows selection based on labels (e.g., column names or index labels) and is particularly useful for data subsets.\n\n::: {#3d161eb2 .cell class='fragment' output-location='fragment' execution_count=24}\n``` {.python .cell-code}\n# Select rows by labels (assuming integer index here) and specific columns\nselected_rows_labels = cancer_data.loc[0:4, ['diagnosis', 'Radius Mean', 'area_mean']]\nprint(\"Selected Rows with loc:\\n\", selected_rows_labels)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelected Rows with loc:\n   diagnosis  Radius Mean  area_mean\n0         M        17.99     1001.0\n1         M        20.57     1326.0\n2         M        19.69     1203.0\n3         M        11.42      386.1\n4         M        20.29     1297.0\n```\n:::\n:::\n\n\n. . .\n\nInteger-Based Indexing with iloc\n\n. . .\n\niloc allows selection based purely on integer positions, making it convenient for slicing and position-based operations.\n\n::: {#d7a2ba8d .cell class='fragment' output-location='fragment' execution_count=25}\n``` {.python .cell-code}\n# Select rows by integer position and specific columns\nselected_rows_position = cancer_data.iloc[0:5, [1, 2, 3]]  # Select first 5 rows and columns at position 1, 2, 3\nprint(\"Selected Rows with iloc:\\n\", selected_rows_position)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelected Rows with iloc:\n   diagnosis  Radius Mean  Texture Mean\n0         M        17.99         10.38\n1         M        20.57         17.77\n2         M        19.69         21.25\n3         M        11.42         20.38\n4         M        20.29         14.34\n```\n:::\n:::\n\n\n## Filtering {.scrollable background-color=\"lavenderblush\"}\n\nFiltering enables you to create subsets of data that match specific conditions. For example, we can filter by diagnosis to analyze only malignant (M) or benign (B) cases.\n\n::: {#2af26ca4 .cell class='fragment' output-location='fragment' execution_count=26}\n``` {.python .cell-code}\n# Filter rows where 'diagnosis' is \"M\" (Malignant)\nmalignant_cases = cancer_data[cancer_data['diagnosis'] == 'M']\nprint(\"Malignant Cases:\\n\", malignant_cases.head(20))\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMalignant Cases:\n           id diagnosis  Radius Mean  Texture Mean  Perimeter Mean  area_mean  \\\n0     842302         M        17.99         10.38          122.80     1001.0   \n1     842517         M        20.57         17.77          132.90     1326.0   \n2   84300903         M        19.69         21.25          130.00     1203.0   \n3   84348301         M        11.42         20.38           77.58      386.1   \n4   84358402         M        20.29         14.34          135.10     1297.0   \n5     843786         M        12.45         15.70           82.57      477.1   \n6     844359         M        18.25         19.98          119.60     1040.0   \n7   84458202         M        13.71         20.83           90.20      577.9   \n8     844981         M        13.00         21.82           87.50      519.8   \n9   84501001         M        12.46         24.04           83.97      475.9   \n10    845636         M        16.02         23.24          102.70      797.8   \n11  84610002         M        15.78         17.89          103.60      781.0   \n12    846226         M        19.17         24.80          132.40     1123.0   \n13    846381         M        15.85         23.95          103.70      782.7   \n14  84667401         M        13.73         22.61           93.60      578.3   \n15  84799002         M        14.54         27.54           96.73      658.8   \n16    848406         M        14.68         20.13           94.74      684.5   \n17  84862001         M        16.13         20.68          108.10      798.8   \n18    849014         M        19.81         22.15          130.00     1260.0   \n22   8511133         M        15.34         14.26          102.50      704.4   \n\n    smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0           0.11840           0.27760         0.30010              0.14710   \n1           0.08474           0.07864         0.08690              0.07017   \n2           0.10960           0.15990         0.19740              0.12790   \n3           0.14250           0.28390         0.24140              0.10520   \n4           0.10030           0.13280         0.19800              0.10430   \n5           0.12780           0.17000         0.15780              0.08089   \n6           0.09463           0.10900         0.11270              0.07400   \n7           0.11890           0.16450         0.09366              0.05985   \n8           0.12730           0.19320         0.18590              0.09353   \n9           0.11860           0.23960         0.22730              0.08543   \n10          0.08206           0.06669         0.03299              0.03323   \n11          0.09710           0.12920         0.09954              0.06606   \n12          0.09740           0.24580         0.20650              0.11180   \n13          0.08401           0.10020         0.09938              0.05364   \n14          0.11310           0.22930         0.21280              0.08025   \n15          0.11390           0.15950         0.16390              0.07364   \n16          0.09867           0.07200         0.07395              0.05259   \n17          0.11700           0.20220         0.17220              0.10280   \n18          0.09831           0.10270         0.14790              0.09498   \n22          0.10730           0.21350         0.20770              0.09756   \n\n    ...  radius_worst  texture_worst  perimeter_worst  area_worst  \\\n0   ...         25.38          17.33           184.60      2019.0   \n1   ...         24.99          23.41           158.80      1956.0   \n2   ...         23.57          25.53           152.50      1709.0   \n3   ...         14.91          26.50            98.87       567.7   \n4   ...         22.54          16.67           152.20      1575.0   \n5   ...         15.47          23.75           103.40       741.6   \n6   ...         22.88          27.66           153.20      1606.0   \n7   ...         17.06          28.14           110.60       897.0   \n8   ...         15.49          30.73           106.20       739.3   \n9   ...         15.09          40.68            97.65       711.4   \n10  ...         19.19          33.88           123.80      1150.0   \n11  ...         20.42          27.28           136.50      1299.0   \n12  ...         20.96          29.94           151.70      1332.0   \n13  ...         16.84          27.66           112.00       876.5   \n14  ...         15.03          32.01           108.80       697.7   \n15  ...         17.46          37.13           124.10       943.2   \n16  ...         19.07          30.88           123.40      1138.0   \n17  ...         20.96          31.48           136.80      1315.0   \n18  ...         27.32          30.88           186.80      2398.0   \n22  ...         18.07          19.08           125.10       980.9   \n\n    smoothness_worst  compactness_worst  concavity_worst  \\\n0             0.1622             0.6656           0.7119   \n1             0.1238             0.1866           0.2416   \n2             0.1444             0.4245           0.4504   \n3             0.2098             0.8663           0.6869   \n4             0.1374             0.2050           0.4000   \n5             0.1791             0.5249           0.5355   \n6             0.1442             0.2576           0.3784   \n7             0.1654             0.3682           0.2678   \n8             0.1703             0.5401           0.5390   \n9             0.1853             1.0580           1.1050   \n10            0.1181             0.1551           0.1459   \n11            0.1396             0.5609           0.3965   \n12            0.1037             0.3903           0.3639   \n13            0.1131             0.1924           0.2322   \n14            0.1651             0.7725           0.6943   \n15            0.1678             0.6577           0.7026   \n16            0.1464             0.1871           0.2914   \n17            0.1789             0.4233           0.4784   \n18            0.1512             0.3150           0.5372   \n22            0.1390             0.5954           0.6305   \n\n    concave points_worst  symmetry_worst  fractal_dimension_worst  \n0                0.26540          0.4601                  0.11890  \n1                0.18600          0.2750                  0.08902  \n2                0.24300          0.3613                  0.08758  \n3                0.25750          0.6638                  0.17300  \n4                0.16250          0.2364                  0.07678  \n5                0.17410          0.3985                  0.12440  \n6                0.19320          0.3063                  0.08368  \n7                0.15560          0.3196                  0.11510  \n8                0.20600          0.4378                  0.10720  \n9                0.22100          0.4366                  0.20750  \n10               0.09975          0.2948                  0.08452  \n11               0.18100          0.3792                  0.10480  \n12               0.17670          0.3176                  0.10230  \n13               0.11190          0.2809                  0.06287  \n14               0.22080          0.3596                  0.14310  \n15               0.17120          0.4218                  0.13410  \n16               0.16090          0.3029                  0.08216  \n17               0.20730          0.3706                  0.11420  \n18               0.23880          0.2768                  0.07615  \n22               0.23930          0.4667                  0.09946  \n\n[20 rows x 32 columns]\n```\n:::\n:::\n\n\n. . .\n\nYou can also filter based on multiple conditions, such as finding rows where the diagnosis is \"M\" and radius_mean is greater than 15.\n\nNote: You can't use 'and' python operator here, because 'and' is a keyword for Python's boolean operations, which work with single True or False values, not arrays or Series.\n\n::: {#1399ba87 .cell class='fragment' output-location='fragment' execution_count=27}\n``` {.python .cell-code}\n# Filter for Malignant cases with radius_mean > 15\nlarge_malignant_cases = cancer_data[(cancer_data['diagnosis'] == 'M') & (cancer_data['Radius Mean'] > 15)]\nprint(\"Large Malignant Cases (Radius Mean > 15):\\n\", large_malignant_cases.head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLarge Malignant Cases (Radius Mean > 15):\n          id diagnosis  Radius Mean  Texture Mean  Perimeter Mean  area_mean  \\\n0    842302         M        17.99         10.38           122.8     1001.0   \n1    842517         M        20.57         17.77           132.9     1326.0   \n2  84300903         M        19.69         21.25           130.0     1203.0   \n4  84358402         M        20.29         14.34           135.1     1297.0   \n6    844359         M        18.25         19.98           119.6     1040.0   \n\n   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0          0.11840           0.27760          0.3001              0.14710   \n1          0.08474           0.07864          0.0869              0.07017   \n2          0.10960           0.15990          0.1974              0.12790   \n4          0.10030           0.13280          0.1980              0.10430   \n6          0.09463           0.10900          0.1127              0.07400   \n\n   ...  radius_worst  texture_worst  perimeter_worst  area_worst  \\\n0  ...         25.38          17.33            184.6      2019.0   \n1  ...         24.99          23.41            158.8      1956.0   \n2  ...         23.57          25.53            152.5      1709.0   \n4  ...         22.54          16.67            152.2      1575.0   \n6  ...         22.88          27.66            153.2      1606.0   \n\n   smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n0            0.1622             0.6656           0.7119                0.2654   \n1            0.1238             0.1866           0.2416                0.1860   \n2            0.1444             0.4245           0.4504                0.2430   \n4            0.1374             0.2050           0.4000                0.1625   \n6            0.1442             0.2576           0.3784                0.1932   \n\n   symmetry_worst  fractal_dimension_worst  \n0          0.4601                  0.11890  \n1          0.2750                  0.08902  \n2          0.3613                  0.08758  \n4          0.2364                  0.07678  \n6          0.3063                  0.08368  \n\n[5 rows x 32 columns]\n```\n:::\n:::\n\n\n## Adding and Modifying Columns {.scrollable background-color=\"lavenderblush\"}\n\n\nYou can create new columns in a DataFrame based on calculations using existing columns. For example, we can calculate the area_ratio by dividing area_worst by area_mean.\n\n::: {#3d9e8070 .cell class='fragment' output-location='fragment' execution_count=28}\n``` {.python .cell-code}\n# Add a new column 'area_ratio' by dividing 'area_worst' by 'area_mean'\ncancer_data['area_ratio'] = cancer_data['area_worst'] / cancer_data['area_mean']\nprint(\"New Column 'area_ratio':\\n\", cancer_data[['area_worst', 'area_mean', 'area_ratio']].head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew Column 'area_ratio':\n    area_worst  area_mean  area_ratio\n0      2019.0     1001.0    2.016983\n1      1956.0     1326.0    1.475113\n2      1709.0     1203.0    1.420615\n3       567.7      386.1    1.470344\n4      1575.0     1297.0    1.214341\n```\n:::\n:::\n\n\n. . .\n\nChanging a Value Using .at\n\n. . .\n\nSuppose you have a DataFrame and want to update the value in the radius_mean column for a particular index.\n\n::: {#2c20d895 .cell class='fragment' output-location='fragment' execution_count=29}\n``` {.python .cell-code}\n# Access and print the original value at index 0 and column 'radius_mean'\noriginal_value = cancer_data.at[0, 'Radius Mean']\nprint(\"Original Radius Mean at index 0:\", original_value)\n\n\n# Change the value at index 0 and column 'radius_mean' to 18.5\ncancer_data.at[0, 'Radius Mean'] = 18.5\n\n\n# Verify the updated value\nupdated_value = cancer_data.at[0, 'Radius Mean']\nprint(\"Updated Radius Mean at index 0:\", updated_value)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal Radius Mean at index 0: 17.99\nUpdated Radius Mean at index 0: 18.5\n```\n:::\n:::\n\n\n. . .\n\n## Sorting by Columns {.scrollable background-color=\"lavenderblush\"}\n\nYou can sort a dataset by columns. Here’s how to sort by diagnosis first and then by area_mean in ascending order.\n\n::: {#5e98766d .cell class='fragment' output-location='fragment' execution_count=30}\n``` {.python .cell-code}\n# Sort by 'diagnosis' first, then by 'area_mean' within each diagnosis group\nsorted_by_diagnosis_area = cancer_data.sort_values(by=['diagnosis', 'area_mean'], ascending=[True, True])\nprint(\"Data sorted by Diagnosis and Area Mean:\\n\", sorted_by_diagnosis_area[['diagnosis', 'area_mean', 'Radius Mean']].head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData sorted by Diagnosis and Area Mean:\n     diagnosis  area_mean  Radius Mean\n101         B      143.5        6.981\n539         B      170.4        7.691\n538         B      178.8        7.729\n568         B      181.0        7.760\n46          B      201.9        8.196\n```\n:::\n:::\n\n\n## Reordering Columns to Move a Column to the End {.scrollable background-color=\"lavenderblush\"}\n\nYou might also want to move a specific column to the end of the DataFrame, such as moving area_ratio to the last position.\n\n::: {#9c58b61e .cell class='fragment' output-location='fragment' execution_count=31}\n``` {.python .cell-code}\n# Move 'area_ratio' to the end of the DataFrame\ncolumns_reordered = [col for col in cancer_data.columns if col != 'area_ratio'] + ['area_ratio']\ncancer_data_with_area_ratio_last = cancer_data[columns_reordered]\n\n# Display the reordered columns\nprint(\"Data with 'area_ratio' at the end:\\n\", cancer_data_with_area_ratio_last.head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData with 'area_ratio' at the end:\n          id diagnosis  Radius Mean  Texture Mean  Perimeter Mean  area_mean  \\\n0    842302         M        18.50         10.38          122.80     1001.0   \n1    842517         M        20.57         17.77          132.90     1326.0   \n2  84300903         M        19.69         21.25          130.00     1203.0   \n3  84348301         M        11.42         20.38           77.58      386.1   \n4  84358402         M        20.29         14.34          135.10     1297.0   \n\n   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0          0.11840           0.27760          0.3001              0.14710   \n1          0.08474           0.07864          0.0869              0.07017   \n2          0.10960           0.15990          0.1974              0.12790   \n3          0.14250           0.28390          0.2414              0.10520   \n4          0.10030           0.13280          0.1980              0.10430   \n\n   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n0  ...          17.33           184.60      2019.0            0.1622   \n1  ...          23.41           158.80      1956.0            0.1238   \n2  ...          25.53           152.50      1709.0            0.1444   \n3  ...          26.50            98.87       567.7            0.2098   \n4  ...          16.67           152.20      1575.0            0.1374   \n\n   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n0             0.6656           0.7119                0.2654          0.4601   \n1             0.1866           0.2416                0.1860          0.2750   \n2             0.4245           0.4504                0.2430          0.3613   \n3             0.8663           0.6869                0.2575          0.6638   \n4             0.2050           0.4000                0.1625          0.2364   \n\n   fractal_dimension_worst  area_ratio  \n0                  0.11890    2.016983  \n1                  0.08902    1.475113  \n2                  0.08758    1.420615  \n3                  0.17300    1.470344  \n4                  0.07678    1.214341  \n\n[5 rows x 33 columns]\n```\n:::\n:::\n\n\n## Method Chaining in Pandas {.scrollable background-color=\"lavenderblush\"}\n\n\nIn Pandas, you can chain multiple methods together to create a pipeline.\n\n::: {#e3898104 .cell class='fragment' output-location='fragment' execution_count=32}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Sample DataFrame\ndf = pd.DataFrame({\n    \"name\": [\" Alice \", \"BOB\", \"Charlie\", None],\n    \"score\": [85, 92, None, 74]\n})\n\n# Clean the data using method chaining\nclean_df = (\n    df\n    .dropna()                # Method: drop rows with any NaNs\n    .assign(                 # Method: add or update columns\n        name_clean=lambda d: d[\"name\"].str.strip().str.title()\n    )\n    .sort_values(\"score\", ascending=False)  # Method: sort by score\n)\n\nprint(clean_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      name  score name_clean\n1      BOB   92.0        Bob\n0   Alice    85.0      Alice\n```\n:::\n:::\n\n\n. . .\n\nWhy `.str.strip()` and not just `.strip()`?\n\n::: {#34935a40 .cell class='fragment' output-location='fragment' execution_count=33}\n``` {.python .cell-code}\n# This works:\ndf[\"name\"].str.strip()\n\n# This does NOT:\ntry:\n    df[\"name\"].strip()  # ❌ AttributeError\nexcept AttributeError: \n    print(\"AttributeError: .strip is used for single strings, not a Series of strings\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAttributeError: .strip is used for single strings, not a Series of strings\n```\n:::\n:::\n\n\n. . .\n\nWhy?\n- `df[\"name\"]` is a Series — not a string.\n- `.strip()` is a string method that works on single strings.\n- `.str` is the accessor that tells pandas: “apply this string method to each element in the Series.”\n\n## Rule of Thumb: {.scrollable background-color=\"lavenderblush\"}\n\n| You have...         | Use...                  | Why?                                   |\n|---------------------|-------------------------|----------------------------------------|\n| A single string     | `\"hello\".strip()`       | It's just Python                       |\n| A Series of strings | `df[\"col\"].str.strip()` | It's pandas, operating on many strings |\n\n---\n\n\n## Applying Functions in Pandas {.scrollable background-color=\"lavenderblush\"}\n\nApplying Functions to Columns\n\n\nUsing apply() to Apply Custom Functions\n\n. . .\n\nThe .apply() method in pandas lets you apply a custom function to each element in a Series (column) or DataFrame. Here’s how to use it to categorize tumors based on area_mean.\n\n. . .\n\nExample: Categorizing Tumors by Size\nLet’s create a custom function to categorize tumors as \"Small\", \"Medium\", or \"Large\" based on area_mean.\n\n::: {#8f24430d .cell class='fragment' output-location='fragment' execution_count=34}\n``` {.python .cell-code}\n# Define a custom function to categorize tumors by area_mean\ndef categorize_tumor(size):\n    if size < 500:\n        return 'Small'\n    elif 500 <= size < 1000:\n        return 'Medium'\n    else:\n        return 'Large'\n\n# Apply the function to the 'area_mean' column and create a new column 'tumor_size_category'\ncancer_data['tumor_size_category'] = cancer_data['area_mean'].apply(categorize_tumor)\n\n# Display the new column to verify the transformation\nprint(\"Tumor Size Categories:\\n\", cancer_data[['area_mean', 'tumor_size_category']].head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTumor Size Categories:\n    area_mean tumor_size_category\n0     1001.0               Large\n1     1326.0               Large\n2     1203.0               Large\n3      386.1               Small\n4     1297.0               Large\n```\n:::\n:::\n\n\n. . .\n\nUsing Lambda Functions for Quick Transformations\n\n. . .\n\nLambda functions are useful for simple, one-line operations. For example, we can use a lambda function to convert diagnosis into numerical codes (0 for Benign, 1 for Malignant).\n\n::: {#0786920e .cell class='fragment' output-location='fragment' execution_count=35}\n``` {.python .cell-code}\n# Apply a lambda function to classify 'diagnosis' into numerical codes\ncancer_data['diagnosis_code'] = cancer_data['diagnosis'].apply(lambda x: 1 if x == 'M' else 0)\n\n# Display the new column to verify the transformation\nprint(\"Diagnosis Codes:\\n\", cancer_data[['diagnosis', 'diagnosis_code']].head())\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDiagnosis Codes:\n   diagnosis  diagnosis_code\n0         M               1\n1         M               1\n2         M               1\n3         M               1\n4         M               1\n```\n:::\n:::\n\n\n## Applying Multiple Conditions with apply() {.scrollable background-color=\"lavenderblush\"}\n\nYou can also use apply() with a lambda function for more complex, multi-condition classifications.\n\n. . .\n\nExample: Adding a Column with Risk Levels\nSuppose we want to create a new column, risk_level, based on both diagnosis and area_mean:\n\n- \"High Risk\" for Malignant tumors with area_mean above 1000.\n- \"Moderate Risk\" for Malignant tumors with area_mean below 1000.\n- \"Low Risk\" for Benign tumors.\n\n::: {#1b75a33e .cell class='fragment' output-location='fragment' execution_count=36}\n``` {.python .cell-code}\n# Apply a lambda function with multiple conditions to create a 'risk_level' column\ncancer_data['risk_level'] = cancer_data.apply(\n    lambda row: 'High Risk' if row['diagnosis'] == 'M' and row['area_mean'] > 1000 \n    else ('Moderate Risk' if row['diagnosis'] == 'M' else 'Low Risk'), axis=1\n)\n\n# Display the new column to verify the transformation\nprint(\"Risk Levels:\\n\", cancer_data[['diagnosis', 'area_mean', 'risk_level']].head())\n\n#Axis=1 tells the function to apply it to the rows. axis=0 (default) applies function to the columns\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRisk Levels:\n   diagnosis  area_mean     risk_level\n0         M     1001.0      High Risk\n1         M     1326.0      High Risk\n2         M     1203.0      High Risk\n3         M      386.1  Moderate Risk\n4         M     1297.0      High Risk\n```\n:::\n:::\n\n\n## When to apply axis= \n\n\n| You’re applying to...              | Use `.apply()` on...          | Do you need `axis`?        |\n|-----------------------------------|-------------------------------|-----------------------------|\n| A single column (Series)          | `df['col'].apply(func)`       | No                          |\n| Multiple columns (row-wise)       | `df.apply(func, axis=1)`      | Yes (`axis=1`)              |\n| Column-wise (less common)         | `df.apply(func)` or `axis=0`  | Optional (default is `0`)   |\n\n\n\n## To export a Pandas dataframe to CSV or XLSX {.scrollable background-color=\"lavenderblush\"}\n\n::: {#717b0af8 .cell execution_count=37}\n``` {.python .cell-code}\n# Export to CSV\n'''\n\ndf.to_csv('/path/to/directory/example.csv', index=False)  # index=False excludes the row indices\n\n\n'''\n#Export to xlsx\n\n'''\n\ndf.to_excel('/path/to/directory/example.xlsx', index=False)\n\n'''\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n\"\\n\\ndf.to_excel('/path/to/directory/example.xlsx', index=False)\\n\\n\"\n```\n:::\n:::\n\n\n## great_tables for table generation {.scrollable background-color=\"lavenderblush\"}\n\nYou can use the `great_tables` Python module from the great-tables package to explore and display data from a dataset in a clean and interactive format.\n\n. . .\n\nWe’ll load the data, summarize it, and then build styled tables using `great_tables`.\n\n---\n\n## Load and Inspect the Data {.scrollable background-color=\"lavenderblush\"}\n\n::: {#9515c9c3 .cell class='fragment' output-location='fragment' execution_count=38}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv(\"..\\\\session3\\\\example_data\\\\Cancer_Data.csv\")\n\n# Drop unnamed column\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n\n# Show the shape and first few rows\ndf.shape, df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n((569, 32),\n          id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n 0    842302         M        17.99         10.38          122.80     1001.0   \n 1    842517         M        20.57         17.77          132.90     1326.0   \n 2  84300903         M        19.69         21.25          130.00     1203.0   \n 3  84348301         M        11.42         20.38           77.58      386.1   \n 4  84358402         M        20.29         14.34          135.10     1297.0   \n \n    smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n 0          0.11840           0.27760          0.3001              0.14710   \n 1          0.08474           0.07864          0.0869              0.07017   \n 2          0.10960           0.15990          0.1974              0.12790   \n 3          0.14250           0.28390          0.2414              0.10520   \n 4          0.10030           0.13280          0.1980              0.10430   \n \n    ...  radius_worst  texture_worst  perimeter_worst  area_worst  \\\n 0  ...         25.38          17.33           184.60      2019.0   \n 1  ...         24.99          23.41           158.80      1956.0   \n 2  ...         23.57          25.53           152.50      1709.0   \n 3  ...         14.91          26.50            98.87       567.7   \n 4  ...         22.54          16.67           152.20      1575.0   \n \n    smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n 0            0.1622             0.6656           0.7119                0.2654   \n 1            0.1238             0.1866           0.2416                0.1860   \n 2            0.1444             0.4245           0.4504                0.2430   \n 3            0.2098             0.8663           0.6869                0.2575   \n 4            0.1374             0.2050           0.4000                0.1625   \n \n    symmetry_worst  fractal_dimension_worst  \n 0          0.4601                  0.11890  \n 1          0.2750                  0.08902  \n 2          0.3613                  0.08758  \n 3          0.6638                  0.17300  \n 4          0.2364                  0.07678  \n \n [5 rows x 32 columns])\n```\n:::\n:::\n\n\n## Preview of dataset using great_tables {.scrollable background-color=\"lavenderblush\"}\n\n::: {#48394477 .cell class='fragment' output-location='fragment' execution_count=39}\n``` {.python .cell-code}\nfrom great_tables import GT\n\n# Select a subset of the columns for preview\npreview_df = df[['id', 'diagnosis', 'radius_mean', 'texture_mean', 'area_mean']].head(5)\n\nGT(preview_df).tab_header(\n    title=\"Breast Cancer Diagnosis Preview\",\n    subtitle=\"Selected features from the first 5 records\"\n).fmt_number(columns=[\"radius_mean\", \"texture_mean\", \"area_mean\"], decimals=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div id=\"jdcydfbzlc\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#jdcydfbzlc table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#jdcydfbzlc thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#jdcydfbzlc p { margin: 0; padding: 0; }\n #jdcydfbzlc .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #jdcydfbzlc .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #jdcydfbzlc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #jdcydfbzlc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #jdcydfbzlc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #jdcydfbzlc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #jdcydfbzlc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #jdcydfbzlc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #jdcydfbzlc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #jdcydfbzlc .gt_column_spanner_outer:first-child { padding-left: 0; }\n #jdcydfbzlc .gt_column_spanner_outer:last-child { padding-right: 0; }\n #jdcydfbzlc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #jdcydfbzlc .gt_spanner_row { border-bottom-style: hidden; }\n #jdcydfbzlc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #jdcydfbzlc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #jdcydfbzlc .gt_from_md> :first-child { margin-top: 0; }\n #jdcydfbzlc .gt_from_md> :last-child { margin-bottom: 0; }\n #jdcydfbzlc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #jdcydfbzlc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #jdcydfbzlc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #jdcydfbzlc .gt_row_group_first td { border-top-width: 2px; }\n #jdcydfbzlc .gt_row_group_first th { border-top-width: 2px; }\n #jdcydfbzlc .gt_striped { background-color: rgba(128,128,128,0.05); }\n #jdcydfbzlc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #jdcydfbzlc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #jdcydfbzlc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #jdcydfbzlc .gt_left { text-align: left; }\n #jdcydfbzlc .gt_center { text-align: center; }\n #jdcydfbzlc .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #jdcydfbzlc .gt_font_normal { font-weight: normal; }\n #jdcydfbzlc .gt_font_bold { font-weight: bold; }\n #jdcydfbzlc .gt_font_italic { font-style: italic; }\n #jdcydfbzlc .gt_super { font-size: 65%; }\n #jdcydfbzlc .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #jdcydfbzlc .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"5\" class=\"gt_heading gt_title gt_font_normal\">Breast Cancer Diagnosis Preview</td>\n  </tr>\n  <tr class=\"gt_heading\">\n    <td colspan=\"5\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\">Selected features from the first 5 records</td>\n  </tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"id\">id</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"diagnosis\">diagnosis</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"radius_mean\">radius_mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"texture_mean\">texture_mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"area_mean\">area_mean</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_right\">842302</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">17.99</td>\n    <td class=\"gt_row gt_right\">10.38</td>\n    <td class=\"gt_row gt_right\">1,001.00</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">842517</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">20.57</td>\n    <td class=\"gt_row gt_right\">17.77</td>\n    <td class=\"gt_row gt_right\">1,326.00</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">84300903</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">19.69</td>\n    <td class=\"gt_row gt_right\">21.25</td>\n    <td class=\"gt_row gt_right\">1,203.00</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">84348301</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">11.42</td>\n    <td class=\"gt_row gt_right\">20.38</td>\n    <td class=\"gt_row gt_right\">386.10</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">84358402</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">20.29</td>\n    <td class=\"gt_row gt_right\">14.34</td>\n    <td class=\"gt_row gt_right\">1,297.00</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n## Enhance the Table with Styling {.scrollable background-color=\"lavenderblush\"}\n\nLet's add conditional formatting to highlight larger tumor areas.\n\n::: {#960dcbb8 .cell class='fragment' output-location='fragment' execution_count=40}\n``` {.python .cell-code}\nGT(preview_df).tab_header(\n    title=\"Styled Cancer Data Table\",\n    subtitle=\"With conditional formatting on tumor area\"\n).fmt_number(columns=[\"radius_mean\", \"texture_mean\", \"area_mean\"], decimals=2\n).data_color(\n    columns=\"area_mean\",\n    palette=[\"blue\", \"red\"]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div id=\"ohnltfunav\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#ohnltfunav table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#ohnltfunav thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#ohnltfunav p { margin: 0; padding: 0; }\n #ohnltfunav .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #ohnltfunav .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #ohnltfunav .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #ohnltfunav .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #ohnltfunav .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #ohnltfunav .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #ohnltfunav .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #ohnltfunav .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #ohnltfunav .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #ohnltfunav .gt_column_spanner_outer:first-child { padding-left: 0; }\n #ohnltfunav .gt_column_spanner_outer:last-child { padding-right: 0; }\n #ohnltfunav .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #ohnltfunav .gt_spanner_row { border-bottom-style: hidden; }\n #ohnltfunav .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #ohnltfunav .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #ohnltfunav .gt_from_md> :first-child { margin-top: 0; }\n #ohnltfunav .gt_from_md> :last-child { margin-bottom: 0; }\n #ohnltfunav .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #ohnltfunav .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #ohnltfunav .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #ohnltfunav .gt_row_group_first td { border-top-width: 2px; }\n #ohnltfunav .gt_row_group_first th { border-top-width: 2px; }\n #ohnltfunav .gt_striped { background-color: rgba(128,128,128,0.05); }\n #ohnltfunav .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #ohnltfunav .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #ohnltfunav .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #ohnltfunav .gt_left { text-align: left; }\n #ohnltfunav .gt_center { text-align: center; }\n #ohnltfunav .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #ohnltfunav .gt_font_normal { font-weight: normal; }\n #ohnltfunav .gt_font_bold { font-weight: bold; }\n #ohnltfunav .gt_font_italic { font-style: italic; }\n #ohnltfunav .gt_super { font-size: 65%; }\n #ohnltfunav .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #ohnltfunav .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"5\" class=\"gt_heading gt_title gt_font_normal\">Styled Cancer Data Table</td>\n  </tr>\n  <tr class=\"gt_heading\">\n    <td colspan=\"5\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\">With conditional formatting on tumor area</td>\n  </tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"id\">id</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"diagnosis\">diagnosis</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"radius_mean\">radius_mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"texture_mean\">texture_mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"area_mean\">area_mean</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_right\">842302</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">17.99</td>\n    <td class=\"gt_row gt_right\">10.38</td>\n    <td style=\"color: #FFFFFF; background-color: #a70058;\" class=\"gt_row gt_right\">1,001.00</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">842517</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">20.57</td>\n    <td class=\"gt_row gt_right\">17.77</td>\n    <td style=\"color: #000000; background-color: #ff0000;\" class=\"gt_row gt_right\">1,326.00</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">84300903</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">19.69</td>\n    <td class=\"gt_row gt_right\">21.25</td>\n    <td style=\"color: #FFFFFF; background-color: #de0021;\" class=\"gt_row gt_right\">1,203.00</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">84348301</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">11.42</td>\n    <td class=\"gt_row gt_right\">20.38</td>\n    <td style=\"color: #FFFFFF; background-color: #0000ff;\" class=\"gt_row gt_right\">386.10</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_right\">84358402</td>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">20.29</td>\n    <td class=\"gt_row gt_right\">14.34</td>\n    <td style=\"color: #000000; background-color: #f70008;\" class=\"gt_row gt_right\">1,297.00</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n## Group Statistics by Diagnosis {.scrollable background-color=\"lavenderblush\"}\n\nLet’s summarize average values by diagnosis group (malignant vs. benign).\n\n::: {#7b93106e .cell class='fragment' output-location='fragment' execution_count=41}\n``` {.python .cell-code}\nsummary_df = df.groupby(\"diagnosis\")[[\"radius_mean\", \"texture_mean\", \"area_mean\"]].mean().reset_index()\n\nGT(summary_df).tab_header(\n    title=\"Group-wise Summary\",\n    subtitle=\"Mean values for radius, texture, and area by diagnosis\"\n).fmt_number(columns=[\"radius_mean\", \"texture_mean\", \"area_mean\"], decimals=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div id=\"jifjcrgzsh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#jifjcrgzsh table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#jifjcrgzsh thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#jifjcrgzsh p { margin: 0; padding: 0; }\n #jifjcrgzsh .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #jifjcrgzsh .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #jifjcrgzsh .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #jifjcrgzsh .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #jifjcrgzsh .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #jifjcrgzsh .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #jifjcrgzsh .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #jifjcrgzsh .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #jifjcrgzsh .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #jifjcrgzsh .gt_column_spanner_outer:first-child { padding-left: 0; }\n #jifjcrgzsh .gt_column_spanner_outer:last-child { padding-right: 0; }\n #jifjcrgzsh .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #jifjcrgzsh .gt_spanner_row { border-bottom-style: hidden; }\n #jifjcrgzsh .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #jifjcrgzsh .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #jifjcrgzsh .gt_from_md> :first-child { margin-top: 0; }\n #jifjcrgzsh .gt_from_md> :last-child { margin-bottom: 0; }\n #jifjcrgzsh .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #jifjcrgzsh .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #jifjcrgzsh .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #jifjcrgzsh .gt_row_group_first td { border-top-width: 2px; }\n #jifjcrgzsh .gt_row_group_first th { border-top-width: 2px; }\n #jifjcrgzsh .gt_striped { background-color: rgba(128,128,128,0.05); }\n #jifjcrgzsh .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #jifjcrgzsh .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #jifjcrgzsh .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #jifjcrgzsh .gt_left { text-align: left; }\n #jifjcrgzsh .gt_center { text-align: center; }\n #jifjcrgzsh .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #jifjcrgzsh .gt_font_normal { font-weight: normal; }\n #jifjcrgzsh .gt_font_bold { font-weight: bold; }\n #jifjcrgzsh .gt_font_italic { font-style: italic; }\n #jifjcrgzsh .gt_super { font-size: 65%; }\n #jifjcrgzsh .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #jifjcrgzsh .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"4\" class=\"gt_heading gt_title gt_font_normal\">Group-wise Summary</td>\n  </tr>\n  <tr class=\"gt_heading\">\n    <td colspan=\"4\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\">Mean values for radius, texture, and area by diagnosis</td>\n  </tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"diagnosis\">diagnosis</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"radius_mean\">radius_mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"texture_mean\">texture_mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"area_mean\">area_mean</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">B</td>\n    <td class=\"gt_row gt_right\">12.15</td>\n    <td class=\"gt_row gt_right\">17.91</td>\n    <td class=\"gt_row gt_right\">462.79</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">M</td>\n    <td class=\"gt_row gt_right\">17.46</td>\n    <td class=\"gt_row gt_right\">21.60</td>\n    <td class=\"gt_row gt_right\">978.38</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n## You Try! {.scrollable background-color=\"lavenderblush\"}\n\nNavigate to the follow-along file and try the practice problems!\n\n",
    "supporting": [
      "DataStructuresDemo_2_files\\figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}