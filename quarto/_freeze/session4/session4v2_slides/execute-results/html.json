{
  "hash": "614182bc991048e38a15bb2c4c6bd021",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '**Session 4 ‚Äì Object-Oriented Programming and Modeling Libraries**'\njupyter: python3\nformat: \n    revealjs:\n        theme: [default, slideshowv2.scss]\n        code-copy: true   \n        smaller: false\n        code-block-height: 850px\n        highlight-style: pygments\n        width: 1600   # default is 960\n        height: 900  # default is 700\n        transition: none\n        code-line-numbers: true\n        self-contained: true\nexecute:\n  freeze: auto\n  eval: true\n  echo: true\n  warning: false\n  error: false\n---\n\n\n## Session Overview\n\n<div class=\"clean-text\">\n\nIn this session, we'll explore how Python's object-oriented nature affects our modeling workflows. <br>\n\n<strong style=\"font-size: 1.15em\">Topics:</strong>  \n<ul>\n  <li><strong>Intro to OOP</strong> and how it makes modeling in Python different from R</li>\n  <li><strong>Building and extending classes</strong> using inheritance and mixins</li>\n  <li><strong>Applying OOP to machine learning</strong> through demos with scikit-learn</li>\n  <ul>\n    <li>Creating and using models</li>\n    <li>Plotting data with `plotnine` and `seaborn`</li>\n  </ul>\n</ul>\n\n</div>\n\n# Introduction \n\n\n\n## Why Python? üêç\n<div class=\"clean-text\">\n\n::: columns\n::: column\n\n#### R: Built by Statisticians for Statisticians\n- Excels at:\n    - Statistical analysis and modeling  \n    - Clean outputs and tables from models\n    - Beautiful data visualizations with simple code  \n\n\n:::\n\n::: column\n\n#### Python: General-Purpose Language\n- Excels at: \n    - Machine Learning, Neural Networks & Deep Learning (scikit-learn, PyTorch, TensorFlow)   \n    - Image & Genomic Data Analysis (scikit-image, biopython, scanpy)\n    - Software & Command Line Interfaces, Web Scraping, Automation\n\n:::\n:::\n\n\nPython‚Äôs broader ecosystem makes it the go-to language in domains like AI, bioinformatics, data engineering, and computational biology.  \n\n> **Note:** Packages like `rpy2` and `reticulate` make it possible to use both R and Python in the same project, but those are beyond the scope of this course.  \n> A primer on `reticulate` is available here: [https://www.r-bloggers.com/2022/04/getting-started-with-python-using-r-and-reticulate/](https://www.r-bloggers.com/2022/04/getting-started-with-python-using-r-and-reticulate/)\n</div>\n\n## Programming Styles: R vs Python\n<div class=\"clean-text\">\n<br>\nIn the first session, we talked briefly about functional vs object-oriented programming:   \n<br>\n\n>  <span style=\"color: #007acc\"><strong>Functional programming:</strong></span> focuses on functions as the primary unit of code <br>\n>  <span style=\"color: #007acc\"><strong>Object-oriented programming:</strong></span> uses objects with attached attributes(data) and methods(behaviors) <br>\n\n- R leans heavily on the functional paradigm ‚Äî you pass data into functions and get back results, in most cases without altering the original data. Functions and pipes (%>%) dominate most workflows.\n\n- In Python, <span style=\"color: #007acc\"><strong>everything is an object</strong></span>, even basic things like lists, strings, and dataframes. A lot of 'functions' are instead written as object-associated methods. Some of these methods modify the objects in-place by altering their attributes. <span style=\"color: #007acc; font-weight:bold\">Understanding how this works is key to using Python effectively!</span>\n\n> You‚Äôve already seen this object-oriented style in Sessions 2 and 3 ‚Äî you create objects like lists or dataframes, then call methods on them like `.append()` or `.sort_values()`. In python, instead of piping, we sometimes chain methods together.\n</div>\n\n## Modeling in Python \n<div class=\"small-clean-text\">\n<span style=\"color: #007acc\"><strong>Python absolutely uses **functions**‚Äîjust like R!</strong></span>\nThey're helpful for **data transformation**, **wrangling**, and **automation tasks** like looping and parallelization. <br>\n\nBut when it comes to **modeling**, libraries are designed around **classes**: blueprints for creating objects that store data (**attributes**) and define behaviors (**methods**).  <br>\n\n  - `scikit-learn` is great for getting started‚Äîeverything follows a simple, consistent OOP interface. Its API is also consistant with other modeling packages, like [xgboost](https://xgboost.readthedocs.io/en/release_3.0.0/) and [scvi-tools](https://docs.scvi-tools.org/en/stable/index.html).\n  - [<u>`scikit-survival`</u>](https://scikit-survival.readthedocs.io/en/stable/) is built on top of `scikit-learn`. [https://scikit-survival.readthedocs.io/en/stable/user_guide/00-introduction.html](https://scikit-survival.readthedocs.io/en/stable/user_guide/00-introduction.html) is a good tutorial for it.\n  - `PyTorch` and `TensorFlow` are essential if you go deeper into neural networks or custom models‚Äîyou‚Äôll define your **own model classes** with attributes and methods, but the basic structure is similar to `scikit-learn`.  \n  - [<u>`statsmodels`</u>](https://www.statsmodels.org/stable/gettingstarted.html) is an alternative to `scikit-learn` for statistical analyses and has R-like syntax and outputs. It's a bit more complex than `scikit-learn` and a bit less consistant with other packages in the python ecosystem. *[https://wesmckinney.com/book/modeling](https://wesmckinney.com/book/modeling) is a good tutorial for statsmodels.*\n\n> üí° To work effectively in Python, especially for tasks involving modeling or model training, <span style=\"color: #007acc\"><strong>it helps to think in terms of objects and classes, not just functions.</strong></span>   \n</div>\n\n## Why Does OOP Matter in Python Modeling? \n<div class=\"clean-text\">\n<strong>In Python modeling frameworks:</strong>\n</p>\n\n<ul style=\"line-height: 1.15; margin-top: 0;\">\n  <li>Models are <strong>instances of classes</strong></li>\n  <li>You call methods like <code>.fit()</code>, <code>.predict()</code>, <code>.score()</code></li>\n  <li>Internal model details like coefficients or layers are stored as <strong>attributes</strong></li>\n</ul>\n\n<p style=\"margin-top: 0.5em; margin-bottom: 0.75em;\">\nThis makes model behavior <strong>consistent</strong> between model classes and even libraries. It also <strong>simplifies</strong> creating/using pre-trained models: both the architecture and learned weights are bundled into a single object with expected built-in methods like `.predict()` or `.fine_tune()`.\n</p>\n\n<blockquote style=\"margin-top: .75em;\">\n  Instead of having a separate results object, like in R, you would retrieve your results by accessing an attribute or using a method that is attached to the model object itself. \n</blockquote>\n<br>\n\n<span style=\"color: #007acc; font-size: 0.95em;\"> <strong><em>We‚Äôll focus on `scikit-learn` in this session, but these ideas carry over to other libraries like `xgboost`, `statsmodels`, and `PyTorch`.</em></strong> </span> \n</div>\n\n# Part 1: Object-Oriented Programming {.smaller}\n\n## **Key OOP Principles (Recap)**\n\n<div class=\"smaller-clean-text\">\nIn OOP, code is structured around **objects** (as opposed to functions). This paradigm builds off the following principles: \n\n::: {.fragment}\n1. **Encapsulation**: Bundling data and methods together in a single unit.  \n   - A `StandardScaler` object stores mean and variance data and has `.fit()` and `.transform()` methods\n:::\n\n::: {.fragment}\n2. **Inheritance**: Creating new classes based on existing ones.  \n   - `sklearn.LinearRegression` inherits attributes and methods from a general regression model class.   \n:::\n::: {.fragment}\n3. **Abstraction**: Hiding implementation details and exposing only essential functionality.  \n   - e.g., `.fit()` works the same way from the outside, regardless of model complexity  \n:::\n::: {.fragment}\n4. **Polymorphism**: Objects of different types can be treated the same way if they implement the same methods. \n    - Python‚Äôs **duck typing**:  \n      - ü¶Ü *\"If it walks like a duck and quacks like a duck, then it must be a duck.\"* ü¶Ü  \n      - ex: If different objects all have a .summarize() method, we can loop over them and call .summarize() without needing to check their class. As long as the method exists, Python will know what to do.\n      - This lets us easily create [<u>pipelines</u>](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline) that can work for many types of models.  \n\n>We won't cover [pipelines](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline) here, but they are worth looking into!\n:::\n</div>\n\n## **Classes and Objects** \n<div class=\"clean-text\">\n\n**Classes** are **blueprints** for creating objects. Each object contains:  \n<ul style=\"font-size: .8em; line-height: 1.2;\">\n    <li><strong>Attributes</strong> (data): model coefficients, class labels</li>\n    <li><strong>Methods</strong> (behaviors): <code>.fit()</code>, <code>.predict()</code></li>\n</ul>\n\n<span style=\"font-size: .8em;\">üëâ To Get the class of an object, use:</span>\n\n::: {#0eb55218 .cell execution_count=1}\n``` {.python .cell-code}\ntype(object) # Returns the type of the object\n```\n:::\n\n\n<span style=\"font-size: .8em;\">üëâ To check if an object is an instance of a particular class, use:</span>\n\n::: {#b3b5d37e .cell execution_count=2}\n``` {.python .cell-code}\nisinstance(object, class)  # Returns True if `object` is an instance of `class`.\n```\n:::\n\n\n<br>\n\n<p style=\"color: #007acc; font-weight: 600;\">\nKnowing what class an object belongs to helps us understand what methods and attributes it provides.\n</p>\n</div>\n\n# Example: Creating a Class\n\n## Base Classes \n<div class=\"clean-text\">\n\nA **base class** (or parent class) serves as a template for creating objects. Other classes can inherit from it to reuse its properties and methods.\n\nClasses are defined using the `class` keyword, and their structure is specified using an `__init__()` method for initialization. \n\n::: {.fragment}\n\nFor example, we can define a class called `Dog` and give it attributes that store data about a given dog and methods that represent behaviors an object of the `Dog` class can perform. We can also edit the [**special** or **\"dunder\"** methods](https://docs.python.org/3/reference/datamodel.html#special-method-names) (short for double underscore) that define how objects behave in certain contexts. \n\n::: {#b3905d71 .cell execution_count=3}\n``` {.python .cell-code code-line-numbers=\"1-2|3,4|6-7|9-13\"}\nclass Dog: ## begin class definition\n    def __init__(self, name, breed): ## define init method\n        self.name = name ## add attributes\n        self.breed = breed\n\n    def speak(self): ## add methods\n        return f\"{self.name} says woof!\"\n\n    def __str__(self): # __str__(self) tells python what to display when an object is printed\n        return f\"Our dog {self.name}\"\n\n    def __repr__(self): # add representation to display when dog is called in console\n        return f\"Dog(name={self.name!r}, breed={self.breed!r})\"\n```\n:::\n\n\n:::\n</div>\n\n## Creating a dog\n<div class=\"clean-text\">\n\nCreating an instance of the `Dog` class lets us model a particular dog:  \n\n::: {#6a65be57 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\nbuddy = Dog(\"Buddy\", \"Golden Retriever\")\nprint(f\"Buddy is an object of class {type(buddy)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuddy is an object of class <class '__main__.Dog'>\n```\n:::\n:::\n\n\n<ul>\n    <li>We set the value of the attributes [`name` and `breed`], which are then stored as part of the `buddy` object </li>   \n    <li> We can use any methods defined in the Dog class on `buddy` </li>   \n</ul>  \n\n::: {#82c2de5b .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code code-line-numbers=\"1-3|5-6|8-9\"}\n## if we want to see what kind of dog our dog is\n## we can call buddy's attributes\nprint(f\"Our dog {buddy.name} is a {buddy.breed}.\")\n\n## we can also call any Dog methods\nprint(buddy.speak())  \n\n## including special methods\nbuddy ## displays what was in the __repr__() method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOur dog Buddy is a Golden Retriever.\nBuddy says woof!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nDog(name='Buddy', breed='Golden Retriever')\n```\n:::\n:::\n\n\n<span style=\"color: #007acc\"><strong>Note:</strong> For python methods, the `self` argument is assumed to be passed and therefore we do not put anything in the parentheses when calling `.speak()`. For attributes, we do not put () at all.</span>\n\n</div>\n\n## Derived (Child) Classes  \n<div class=\"clean-text\">\n\nDerived/child classes build on base classes using the principle of inheritence. <br>\n\nNow that we have a `Dog` class, we can build on it to create a specialized `GuardDog` class. \n\n::: {#9c1b4d70 .cell execution_count=6}\n``` {.python .cell-code code-line-numbers=\"|1|2-7|\"}\nclass GuardDog(Dog):  # GuardDog inherits from Dog\n    def __init__(self, name, breed, training_level): ## in addition to name and breed, we can \n        # define a training level. \n        # Call the parent (Dog) class's __init__ method\n        super().__init__(name, breed)\n        self.training_level = training_level  # New attribute for GuardDog that stores the \n        # training level for the dog\n\n    def guard(self): ## checks if the training level is > 5 and if not says train more\n        if self.training_level > 5:\n            return f\"{self.name} is guarding the house!\"\n        else:\n            return f\"{self.name} needs more training before guarding.\"\n    \n    def train(self): # modifies the training_level attribute to increase the dog's training level\n        self.training_level = self.training_level + 1\n        return f\"Training {self.name}. {self.name}'s training level is now {self.training_level}\"\n\n# Creating an instance of GuardDog\nrex = GuardDog(\"Rex\", \"German Shepherd\", training_level= 5)\n```\n:::\n\n\n</div>\n\n---\n\nNow that we have a dog (rex), we can call on any of the methods/attributes introduced in the `Dog` class as well as the new `GuardDog` class.\n\nUsing methods from the base class: \n\n::: {#dae2cde5 .cell output-location='fragment' slide-type='fragment' execution_count=7}\n``` {.python .cell-code}\nprint(rex.speak())\nrex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRex says woof!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nDog(name='Rex', breed='German Shepherd')\n```\n:::\n:::\n\n\n<br>\n\nUsing a method from the child class: \n\n::: {#15eed1c3 .cell output-location='fragment' slide-type='fragment' execution_count=8}\n``` {.python .cell-code}\nprint(f\"{rex.name}'s training level is {rex.training_level}.\")\nprint(rex.guard()) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRex's training level is 5.\nRex needs more training before guarding.\n```\n:::\n:::\n\n\n. . . \n\n<span style=\"font-size: 1.15em; color: #007acc\"><strong>This is the power of inheritance</strong></span>‚Äîwe don‚Äôt have to rewrite everything from scratch!\n\n---\n\nUnlike standalone functions, methods in Python often update objects in-place‚Äîmeaning they modify the object itself rather than returning a new one.\n\nWe can use the `.train()` method to increase rex's training level. \n\n::: {#53bff453 .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\nprint(rex.train())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTraining Rex. Rex's training level is now 6\n```\n:::\n:::\n\n\n. . . \n\n<br>\n\nNow if we check, \n\n::: {#afdf9223 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\nprint(f\"{rex.name}'s training level is {rex.training_level}.\")\nprint(rex.guard()) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRex's training level is 6.\nRex is guarding the house!\n```\n:::\n:::\n\n\n<br>\n\n. . . \n\nAs with Rex, <span style=\"color: #007acc\"><strong>child classes inherit all attributes (`.name` and `.breed`) and methods (`.speak()` `__repr__()`) from parent classes.</strong></span> They can also have new methods (`.train()`).\n\n## Mixins\n<div class=\"clean-text\">  \n\nA **mixin** is a special kind of class designed to add **functionality** to another class. Unlike base classes, mixins aren‚Äôt used alone.  \n\n:::{.fragment}\n\nFor example, scikit-learn uses mixins like:  \n  - `sklearn.base.ClassifierMixin` (adds classifier-specific methods)  \n  - `sklearn.base.RegressorMixin` (adds regression-specific methods)  \n\nwhich it adds to the `BaseEstimator` class to add functionality. <br> <br>\n\nTo finish up our dog example, we are going to define a mixin class that adds learning tricks to the base `Dog` class and use it to create a new class called `SmartDog`.\n:::\n</div>\n\n---\n\n\nWhen creating a mixin class, we let the other base classes carry most of the initialization\n\n::: {#d95d4b21 .cell execution_count=11}\n``` {.python .cell-code code-line-numbers=\"|2,3|4|6-20\"}\nclass TrickMixin: ## mixin that will let us teach a dog tricks\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)  # Ensures proper initialization in multi inheritance\n        self.tricks = []  # Add attribute to store tricks\n\n## add trick methods\n    def learn_trick(self, trick):\n        \"\"\"Teaches the dog a new trick.\"\"\"\n        if trick not in self.tricks:\n            self.tricks.append(trick)\n            return f\"{self.name} learned a new trick: {trick}!\"\n        return f\"{self.name} already knows {trick}!\"\n\n    def perform_tricks(self):\n        \"\"\"Returns a list of tricks the dog knows.\"\"\"\n        if self.tricks:\n            return f\"{self.name} can perform: {', '.join(self.tricks)}.\"\n        return f\"{self.name} hasn't learned any tricks yet.\"\n\n## note: the TrickMixin class is not a standalone class!\n```\n:::\n\n\n---\n\nBy including both `Dog` and `TrickMixin` as base classes, we give objects of class `SmartDog` the ability to speak and learn tricks!\n\n::: {#a9f78476 .cell output-location='fragment' slide-type='fragment' execution_count=12}\n``` {.python .cell-code}\nclass SmartDog(Dog, TrickMixin):\n    def __init__(self, name, breed):\n        super().__init__(name, breed)  # Initialize Dog class\n        TrickMixin.__init__(self)  # Initialize TrickMixin separately\n\n# a SmartDog object can use methods from both parent object `Dog` and mixin `TrickMixin`.\nmy_smart_dog = SmartDog(\"Buddy\", \"Border Collie\")\nprint(my_smart_dog.speak()) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuddy says woof!\n```\n:::\n:::\n\n\n<br>\n\n::: {#4ccfc2d0 .cell output-location='fragment' slide-type='fragment' execution_count=13}\n``` {.python .cell-code}\nprint(my_smart_dog.learn_trick(\"Sit\"))  \nprint(my_smart_dog.learn_trick(\"Roll Over\")) \nprint(my_smart_dog.learn_trick(\"Sit\"))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuddy learned a new trick: Sit!\nBuddy learned a new trick: Roll Over!\nBuddy already knows Sit!\n```\n:::\n:::\n\n\n<br>\n\n::: {#d7776528 .cell output-location='fragment' slide-type='fragment' execution_count=14}\n``` {.python .cell-code}\nprint(my_smart_dog.perform_tricks()) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuddy can perform: Sit, Roll Over.\n```\n:::\n:::\n\n\n## Duck Typing \n\n\n<div class=\"clean-text\"> \n\n>ü¶Ü \"If it quacks like a duck and walks like a duck, it's a duck.\" ü¶Ü\n\nPython's duck typing makes our lives a lot easier, and is one of the main benefits of methods over functions:\n<ul>\n    <li><b>Repurposing old code</b> - methods by the same name work the same for different model types</li>\n    <li><b>Not necessary to check types before using methods</b> - methods are assumed to work on the object they're attached to</li>\n</ul>\n\n\n</div>  \n\nWe can demonstrate this by defining two new base classes that are different than `Dog` but also have a `speak()` method.\n\n. . . \n\n::: {#5d89e823 .cell execution_count=15}\n``` {.python .cell-code code-line-numbers=\"|5-6,12-13\"}\nclass Human:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return f\"{self.name} says hello!\"\n\nclass Parrot:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return f\"{self.name} says squawk!\"\n```\n:::\n\n\n## Duck Typing in Action\n<div class=\"clean-text\">  \n\nEven though `Dog`, `Human` and `Parrot` are entirely different classes...\n\n</div>\n\n::: {#d498183b .cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\ndef call_speaker(obj):\n    print(obj.speak())\n\ncall_speaker(Dog(\"Fido\", \"Labrador\"))\ncall_speaker(Human(\"Alice\"))\ncall_speaker(Parrot(\"Polly\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFido says woof!\nAlice says hello!\nPolly says squawk!\n```\n:::\n:::\n\n\n. . .  \n\nThey all implement `.speak()`, so Python treats them the same!\n\nIn the context of our work, this would allow us to make a pipeline using models from different libraries that have the same methods. \n\n<br>\n\n<span style=\"font-size: 1.2em; color: #007acc\"><strong>While our dog example was very simple, this is the same way that model classes work in python!</strong></span> \n\n\n\n## **Example: OOP in Machine Learning and Modeling**  \n\n<div class=\"clean-text\">  \n\nMachine learning models in Python are implemented as **classes**.    \n<ul>\n <li>When you create a model, you‚Äôre **instantiating an object** of a predefined class (e.g., `LogisticRegression()`).</li>    \n <li>That model has attributes (parameters, coefficients) and methods (like `.fit()` and `.predict()`).</li>\n</ul> \n\nFor example `LogisticRegression` is a model class that inherits from `SparseCoefMixin` and `BaseEstimator`.\n\n```{.python}\nclass LogisticRegression(LinearClassifierMixin, SparseCoefMixin, BaseEstimator):\n\n```\n\n<span style=\"top-padding: .35em;\">To perform logistic regression, we create an instance of the `LogisticRegression` class.</span>\n\n```{.python}\n## Example: \nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()  # Creating an instance of the LogisticRegression class\nmodel.fit(X_train, y_train)   # Calling a method to train the model\npredictions = model.predict(X_test)  # Calling a method to make predictions\ncoefs = model.coef_ # Access model coefficients using attribute\n``` \n\n</div>\n\n## **Key Benefits of OOP in Machine Learning**  \n<div class=\"clean-text\">  \n\n1. **Encapsulation** ‚Äì Models store parameters and methods inside a single object.  \n2. **Inheritance** ‚Äì New models can build on base models, reusing existing functionality.  \n3. **Abstraction**  ‚Äì `.fit()` should work as expected, regardless of complexity of underlying implimentation.\n4. **Polymorphism (Duck Typing)** ‚Äì Different models share the same method names (`.fit()`, `.predict()`), making them easy to use interchangeably, particularly in analysis pipelines. \n\nUnderstanding **base classes** and **mixins** is especially important when working with deep learning frameworks like **PyTorch and TensorFlow**, which require us to create our own model classes.  \n\n</div>\n\n# Part B - Demo Projects\n\n**Apply knowledge of OOP to modeling using scikit-learn**\n\n---\n\n## üêß Mini Project: Classifying Penguins with scikit-learn\n\n<div class=\"clean-text\">  \n\nNow that you understand **classes** and **data structures** in Python, let‚Äôs apply that knowledge to classify **penguin species** using two features:  \n<ul>\n<li>`bill_length_mm`</li>  \n<li>`bill_depth_mm`</li>\n</ul> \n\n\nWe‚Äôll explore:  \n\n<ul>\n<li> **Unsupervised learning** with **K-Means** clustering (model doesn't 'know' y)</li>\n<li>**Supervised learning** with a **k-NN classifier** (model trained w/ y information)</li>\n</ul>\n\nAll `scikit-learn` models are designed to have \n\n::: columns\n::: column\n**Common Methods:**  \n<ul>\n<li>`.fit()` ‚Äî Train the model </li>  \n<li>`.predict()` ‚Äî Make predictions  </li>\n</ul>    \n\n:::\n::: column\n**Common Attributes:** \n<ul>\n<li>`.classes_`, `.n_clusters_`, etc.</li>\n</ul>  \n\n:::\n:::\n> This is true of the scikit-survival package too! \n\n</div>\n\n## Import Libraries\n<div class=\"clean-text\">  \n\n<span style=\"font-size: 1.2em; color: #007acc\"><strong>Before any analysis, we must import the necessary libraries.</strong></span>  \n\nFor large libraries like **scikit-learn**, **PyTorch**, or **TensorFlow**, we usually do **not** import the entire package. Instead, we selectively import the **classes** and **functions** we need.\n\n::: columns\n::: column\n\n**Classes**  \n- `StandardScaler` ‚Äî for feature scaling  \n- `KNeighborsClassifier` ‚Äî for supervised k-NN classification  \n- `KMeans` ‚Äî for unsupervised clustering\n\n<br>\n\n> üî§ **Naming Tip**:  \n> - `CamelCase` = **Classes**  \n> - `snake_case` = **Functions**\n\n:::\n::: column\n\n**Functions**  \n- `train_test_split()` ‚Äî to split data into training and test sets  \n- `accuracy_score()` ‚Äî to evaluate classification accuracy  \n- `classification_report()` ‚Äî to print precision, recall, F1 (balance of precision and recall), Support (number of true instances per class)\n- `adjusted_rand_score()` ‚Äî to evaluate clustering performance\n:::\n:::\n\n</div>\n\n\n## Import Libraries\n\n::: {#a1ae99c7 .cell execution_count=17}\n``` {.python .cell-code code-line-numbers=\"|13-17|18-21\"}\n## imports\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom great_tables import GT\n\n## sklearn imports\n\n## import classes\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.cluster import KMeans\n\n## import functions\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, adjusted_rand_score\n```\n:::\n\n\n## Data Preparation \n\n::: {#14cc589f .cell output-location='fragment' execution_count=18}\n``` {.python .cell-code code-line-numbers=\"1,2|4-11|13-16|18-19\"}\n# Load the Penguins dataset\npenguins = sns.load_dataset(\"penguins\").dropna()\n\n# Make a summary table for the penguins dataset, grouping by species. \nsummary_table = penguins.groupby(\"species\").agg({\n    \"bill_length_mm\": [\"mean\", \"std\", \"min\", \"max\"],\n    \"bill_depth_mm\": [\"mean\", \"std\", \"min\", \"max\"],\n    \"sex\": lambda x: x.value_counts().to_dict()  # Count of males and females\n})\n\n# Round numeric values to 1 decimal place (excluding the 'sex' column)\nfor col in summary_table.columns:\n    if summary_table[col].dtype in [float, int]:\n        summary_table[col] = summary_table[col].round(1)\n\n# Display the result\ndisplay(summary_table)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"4\" halign=\"left\">bill_length_mm</th>\n      <th colspan=\"4\" halign=\"left\">bill_depth_mm</th>\n      <th>sex</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>max</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>max</th>\n      <th>&lt;lambda&gt;</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelie</th>\n      <td>38.8</td>\n      <td>2.7</td>\n      <td>32.1</td>\n      <td>46.0</td>\n      <td>18.3</td>\n      <td>1.2</td>\n      <td>15.5</td>\n      <td>21.5</td>\n      <td>{'Male': 73, 'Female': 73}</td>\n    </tr>\n    <tr>\n      <th>Chinstrap</th>\n      <td>48.8</td>\n      <td>3.3</td>\n      <td>40.9</td>\n      <td>58.0</td>\n      <td>18.4</td>\n      <td>1.1</td>\n      <td>16.4</td>\n      <td>20.8</td>\n      <td>{'Female': 34, 'Male': 34}</td>\n    </tr>\n    <tr>\n      <th>Gentoo</th>\n      <td>47.6</td>\n      <td>3.1</td>\n      <td>40.9</td>\n      <td>59.6</td>\n      <td>15.0</td>\n      <td>1.0</td>\n      <td>13.1</td>\n      <td>17.3</td>\n      <td>{'Male': 61, 'Female': 58}</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Data Visualization\n\n<div class=\"small-clean-text\"> \n\nTo do visualization, we can use either seaborn or plotnine. `plotnine` mirrors `ggplot2` syntax from R and is great for layered grammar-of-graphics plots, while `seaborn` `seaborn`  is more convienient if you want to put multiple plots on the same figure. <br>\n\n\n### Plotting with Plotnine vs Seaborn\n\n::: columns\n::: column\n\n<span style=\"color: #007acc; font-weight: 600;\">Plotnine (like ggplot2 in R)</span><br>\nThe biggest differences between `plotnine` and `ggplot2` syntax are: \n<ul> \n<li> With `plotnine` the whole call is wrapped in `()` parentheses</li>  \n<li> Variables are called with strings (`\"\"` are needed!) </li>\n<li> If you don't use `from plotnine import *`, you will need to import each individual function you plan to use!</li>\n</ul>\n\n:::\n\n::: column\n\n<span  style=\"color: #007acc; font-weight: 600;\">Seaborn (base matplotlib + enhancements)</span><br>\n<ul>\n<li> Designed for **quick, polished plots** </li> \n<li> Works well with **pandas DataFrames** or **NumPy arrays** </li> \n<li> Integrates with `matplotlib` for customization </li> \n<li> Good for things like **decision boundaries** or **heatmaps**</li> \n<li> Harder to customize than plotnine plots </li> \n</ul>\n\n:::\n:::\n\n</div>\n\n## Scatterplot with plotnine\n<div class=\"clean-text\"> \n\nTo take a look at the distribution of our species by bill length and bill depth before clustering...\n</div>\n\n::: {#dc232f38 .cell fig-dpi='600' output-location='fragment' execution_count=19}\n``` {.python .cell-code}\nplot1 = (ggplot(penguins, aes(x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\"))\n + geom_point()\n + ggtitle(\"Penguin Species\")\n + theme_bw())\n\ndisplay(plot1)\n```\n\n::: {.cell-output .cell-output-display}\n![](session4v2_slides_files/figure-revealjs/cell-20-output-1.png){width=960 height=480}\n:::\n:::\n\n\n## Scatterplot with seaborn\n\nWe can make a similar plot in seaborn. This time, let's include sex by setting the point style\n\n::: {#fdd5cfb6 .cell output-location='slide' execution_count=20}\n``` {.python .cell-code code-line-numbers=\"1-2|4-10|12-16|18-19\"}\n# Create the figure and axes obects\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Create a plot \nsns.scatterplot(\n    data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n    hue=\"species\", ## hue = fill\n    style=\"sex\",  ## style = style of dots\n    palette=\"Set2\", ## sets color pallet\n    edgecolor=\"black\", s=300, ## line color and point size \n    ax=ax              ## Draw plot on ax      \n)\n\n# Use methods on ax to set title, labels\nax.set_title(\"Penguin Bill Length vs Depth by Species\")\nax.set_xlabel(\"Bill Length (mm)\")\nax.set_ylabel(\"Bill Depth (mm)\")\nax.legend(title=\"Species\")\n\n# Plot the figure\nfig.tight_layout() \n```\n\n::: {.cell-output .cell-output-display}\n![](session4v2_slides_files/figure-revealjs/cell-21-output-1.png){width=949 height=756}\n:::\n:::\n\n\n## Scaling the data - Understanding the Standard Scaler class\n<div class=\"clean-text\">  \n\nFor our clustering to work well, the predictors should be on the same scale. To achieve this, we use an instance of the `StandardScaler` class. \n\n```python\nclass sklearn.preprocessing.StandardScaler(*, copy=True, with_mean=True, with_std=True)\n```\n</div>\n. . .   \n\n**Parameters** are supplied by user  \n- *copy*, *with_mean*, *with_std* <br>\n\n**Attributes** contain the `data` of the object  \n- `scale_`: scaling factor  \n- `mean_`: mean value for each feature  \n- `var_`: variance for each feature  \n- `n_features_in_`: number of features seen during fit  \n- `n_samples_seen`: number of samples processed for each feature <br>\n\n**Methods** describe the `behaviors` of the object and/or `modify` its attributes  \n- `fit(X)`: computes mean and std used for scaling and 'fits' scaler to data X  \n- `transform(X)`: performs standardization by centering and scaling X with fitted scaler  \n- `fit_transform(X)`: does both\n\n## Scaling Data\n\n<div class=\"clean-text\">  \n\n::: {#29cbe439 .cell execution_count=21}\n``` {.python .cell-code code-line-numbers=\"|5-7\"}\n# Selecting features for clustering -> let's just use bill length and bill depth.\nX = penguins[[\"bill_length_mm\", \"bill_depth_mm\"]]\ny = penguins[\"species\"]\n\n# Standardizing the features for better clustering performance\nscaler = StandardScaler() ## create instance of StandardScaler\nX_scaled = scaler.fit_transform(X) \n```\n:::\n\n\n:::{.fragment}\n\n::: {#8ff941d9 .cell execution_count=22}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div id=\"xkbcsruawm\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#xkbcsruawm table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#xkbcsruawm thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#xkbcsruawm p { margin: 0; padding: 0; }\n #xkbcsruawm .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #xkbcsruawm .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #xkbcsruawm .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #xkbcsruawm .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #xkbcsruawm .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #xkbcsruawm .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #xkbcsruawm .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #xkbcsruawm .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #xkbcsruawm .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #xkbcsruawm .gt_column_spanner_outer:first-child { padding-left: 0; }\n #xkbcsruawm .gt_column_spanner_outer:last-child { padding-right: 0; }\n #xkbcsruawm .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #xkbcsruawm .gt_spanner_row { border-bottom-style: hidden; }\n #xkbcsruawm .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #xkbcsruawm .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #xkbcsruawm .gt_from_md> :first-child { margin-top: 0; }\n #xkbcsruawm .gt_from_md> :last-child { margin-bottom: 0; }\n #xkbcsruawm .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #xkbcsruawm .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #xkbcsruawm .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #xkbcsruawm .gt_row_group_first td { border-top-width: 2px; }\n #xkbcsruawm .gt_row_group_first th { border-top-width: 2px; }\n #xkbcsruawm .gt_striped { background-color: rgba(128,128,128,0.05); }\n #xkbcsruawm .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #xkbcsruawm .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #xkbcsruawm .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #xkbcsruawm .gt_left { text-align: left; }\n #xkbcsruawm .gt_center { text-align: center; }\n #xkbcsruawm .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #xkbcsruawm .gt_font_normal { font-weight: normal; }\n #xkbcsruawm .gt_font_bold { font-weight: bold; }\n #xkbcsruawm .gt_font_italic { font-style: italic; }\n #xkbcsruawm .gt_super { font-size: 65%; }\n #xkbcsruawm .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #xkbcsruawm .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"5\" class=\"gt_heading gt_title gt_font_normal\">Original vs Scaled Features</td>\n  </tr>\n<tr class=\"gt_col_headings gt_spanner_row\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Feature\">Feature</th>\n  <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Original\">\n    <span class=\"gt_column_spanner\">Original</span>\n  </th>\n  <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Scaled\">\n    <span class=\"gt_column_spanner\">Scaled</span>\n  </th>\n</tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Original Mean\">Original Mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Original Std\">Original Std</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Scaled Mean\">Scaled Mean</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Scaled Std\">Scaled Std</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">mean</td>\n    <td class=\"gt_row gt_right\">44</td>\n    <td class=\"gt_row gt_right\">17</td>\n    <td class=\"gt_row gt_right\">0</td>\n    <td class=\"gt_row gt_right\">0</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">std</td>\n    <td class=\"gt_row gt_right\">5</td>\n    <td class=\"gt_row gt_right\">2</td>\n    <td class=\"gt_row gt_right\">1</td>\n    <td class=\"gt_row gt_right\">1</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n::: {#8c28e7cf .cell execution_count=23}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show table code\"}\n## Make X_scaled a pandas df\nX_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)\n\n# Compute summary statistics and round to 2 sig figs\noriginal_stats = X.agg([\"mean\", \"std\"])\nscaled_stats = X_scaled_df.agg([\"mean\", \"std\"])\n\n# Combine into a single table with renamed columns\nsummary_table = pd.concat([original_stats, scaled_stats], axis=1)\nsummary_table.columns = [\"Original Mean\", \"Original Std\", \"Scaled Mean\", \"Scaled Std\"]\nsummary_table.index.name = \"Feature\"\n\n# Display nicely with great_tables\n(\n    GT(summary_table.reset_index()).tab_header(\"Original vs Scaled Features\")\n    .fmt_number(n_sigfig = 2)\n    .tab_spanner(label=\"Original\", columns=[\"Original Mean\", \"Original Std\"])\n    .tab_spanner(label=\"Scaled\", columns=[\"Scaled Mean\", \"Scaled Std\"])\n    .tab_options(table_font_size = 20)\n)\n```\n:::\n\n\n:::\n\n</div>\n\n## Understanding the KMeans model class\n<div class=\"clean-text\"> \n\n```python\nclass sklearn.cluster.KMeans(n_clusters=8, *, init='k-means++', n_init='auto', max_iter=300, \ntol=0.0001, verbose=0, random_state=None, copy_x=True, algorithm='lloyd')\n```\n\n**Parameters**: Set by user at time of instantiation  \n- n_clusters, max_iter, algorithm  <br>\n\n**Attributes**: Store object data    \n- `cluster_centers_`: stores coordinates of cluster centers  \n- `labels_`: stores labels of each point \n- `n_iter_`: number of iterations run (will be changed during method run)  \n- `n_features_in` and `feature_names_in_`: store info about features seen during fit  <br>\n\n**Methods**: Define object behaviors      \n- `fit(X)`: fits model to data X\n- `predict(X)`: predicts closest cluster each sample in X belongs to  \n- `transform(X)`: transforms X to cluster-distance space  \n</div>\n\n---\n\n<div class=\"clean-text\"> \n\n### Create model\n\n::: {#2f276a3c .cell execution_count=24}\n``` {.python .cell-code}\n## Choosing 3 clusters b/c we have 3 species\nkmeans = KMeans(n_clusters=3, random_state=42) ## make an instance of the K means class\nkmeans\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"‚ñ∏\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"‚ñæ\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">&nbsp;&nbsp;KMeans<a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></label><div class=\"sk-toggleable__content \"><pre>KMeans(n_clusters=3, random_state=42)</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n<br>\n\n### Fit model to data\n\n::: {#6e366b91 .cell output-location='fragment' execution_count=25}\n``` {.python .cell-code}\n## the fit\npenguins[\"kmeans_cluster\"] = kmeans.fit_predict(X_scaled)\n\n## now that we fit the model, we should have cluster centers\nprint(\"Coordinates of cluster centers:\", kmeans.cluster_centers_)\n\n## shows that model is fitted\nkmeans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinates of cluster centers: [[-0.95023997  0.55393493]\n [ 0.58644397 -1.09805504]\n [ 1.0886843   0.79503579]]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"‚ñ∏\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"‚ñæ\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KMeans<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(n_clusters=3, random_state=42)</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n</div>\n\n\n## Use function to calculate ARI\n<div class=\"clean-text\"> \n\nTo check how good our model is, we can use one of the functions included in the sklearn library.\n\nThe `adjusted_rand_score()` function evaluates how well the cluster groupings agree with the species groupings while adjusting for chance. \n\n::: {#988511a3 .cell output-location='fragment' execution_count=26}\n``` {.python .cell-code}\n# Calculate clustering performance using Adjusted Rand Index (ARI)\nkmeans_ari = adjusted_rand_score(penguins['species'], penguins[\"kmeans_cluster\"])\nprint(f\"k-Means Adjusted Rand Index: {kmeans_ari:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk-Means Adjusted Rand Index: 0.82\n```\n:::\n:::\n\n\n</div>\n\n---\n\n\n### We can also use methods on our data structure to create new data\n\n<div class=\"clean-text\"> \n- We can use the `.groupby()` method to help us plot cluster agreement with species label as a heatmap\n- If we want to add sex as a variable to see if that is why our clusters don't agree with our species, we can use a scatterplot\n- Using seaborn and matplotlib, we can easily put both of these plots on the same figure. \n<br>\n\n::: {#9899152d .cell execution_count=27}\n``` {.python .cell-code code-line-numbers=\"1-5|8-14|16-17\"}\n# Count occurrences of each species-cluster-sex combination\n# (.size gives the count as index, use reset_index to get count column.)\nscatter_data = (penguins.groupby([\"species\", \"kmeans_cluster\", \"sex\"])\n                .size()\n                .reset_index(name=\"count\"))\nspecies_order = list(scatter_data['species'].unique()) ## defining this for later\n\n# Create a mapping to add horizontal jitter for each sex for scatterplot\nsex_jitter = {'Male': -0.1, 'Female': 0.1}\nscatter_data['x_jittered'] = scatter_data.apply(\n    lambda row: scatter_data['species'].unique().tolist().index(row['species']) +\n     sex_jitter.get(row['sex'], 0),\n    axis=1\n)\n\nheatmap_data = scatter_data.pivot_table(index=\"kmeans_cluster\", columns=\"species\", \nvalues=\"count\", aggfunc=\"sum\", fill_value=0)\n```\n:::\n\n\n</div>\n\n\n## Creating Plots \n\n::: {#1bada3e3 .cell output-location='slide' execution_count=28}\n``` {.python .cell-code code-line-numbers=\"1-2|4-9|11-23\"}\n# Prepare the figure with 2 subplots; the axes object will contain both plots\nfig2, axes = plt.subplots(1, 2, figsize=(16, 7)) ## 1 row 2 columns\n\n# Plot heatmap on the first axis\nsns.heatmap(data = heatmap_data, cmap=\"Blues\", linewidths=0.5, linecolor='white', annot=True, \nfmt='d', ax=axes[0])\naxes[0].set_title(\"Heatmap of KMeans Clustering by Species\")\naxes[0].set_xlabel(\"Species\")\naxes[0].set_ylabel(\"KMeans Cluster\")\n\n# Scatterplot with jitter\nsns.scatterplot(data=scatter_data, x=\"x_jittered\", y=\"kmeans_cluster\",\n    hue=\"species\", style=\"sex\", size=\"count\", sizes=(100, 500),\n    alpha=0.8, ax=axes[1], legend=\"brief\")\naxes[1].set_xticks(range(len(species_order)))\naxes[1].set_xticklabels(species_order)\naxes[1].set_title(\"Cluster Assignment by Species and Sex (Jittered)\")\naxes[1].set_ylabel(\"KMeans Cluster\")\naxes[1].set_xlabel(\"Species\")\naxes[1].set_yticks([0, 1, 2])\naxes[1].legend(bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0.0, title=\"Legend\")\n\nfig2.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](session4v2_slides_files/figure-revealjs/cell-29-output-1.png){width=1530 height=660}\n:::\n:::\n\n\n## Project 2: KNN classification\n\n<div class=\"clean-text\"> \n\nFor our KNN classification, the model is **supervised** (meaning it is dependent on the outcome 'y' data). This time, we need to split our data into a training and test set. <br>\n\n</div>\n\n. . . \n\nThe **function** `train_test_split()` from scikit-learn is helpful here! \n\n::: {#4b625696 .cell execution_count=29}\n``` {.python .cell-code}\n# Splitting dataset into training and testing sets (still using scaled X!)\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)\n```\n:::\n\n\n. . . \n\n>Unlike R functions, which return a single object (often a list when multiple outputs are needed), Python functions can return multiple values as a tuple‚Äîletting you unpack them directly into separate variables.\n\n## Understanding KNeighborsClassifier class\n\n```{.python}\nclass sklearn.neighbors.KNeighborsClassifier(n_neighbors=5, *, weights='uniform', \nalgorithm='auto', leaf_size=30, p=2, metric='minkowski', metric_params=None, n_jobs=None)\n```\n. . . \n\n**Parameters**: Set by user at time of instantiation    \n- n_neigbors, weights, algorithm, etc.  <br>\n\n**Attributes**: Store object data     \n- `classes_`: class labels known to the classifier  \n- `effective_metric_`: distance metric used  \n- `effective_metric_params_`: parameters for the metric function  \n- `n_features_in` and `feature_names_in_`: store info about features seen during fit    \n- `n_samples_fit_`: number of samples in fitted data  <br> \n\n**Methods**: Define object behaviors      \n- `.fit(X, y)`: fit knn classifier from training dataset (X and y)  \n- `.predict(X)`: predict class labels for provided data X  \n- `.predict_proba(X)`: return probability estimates for test data X  \n- `.score(X, y)`: return mean accuracy on given test data X and labels y  \n\n## Making an instance of KNeighborsClassifier and fitting to training data\n- For a supervised model, y_train is included in `.fit()`!\n\n::: {#dc7dcce1 .cell execution_count=30}\n``` {.python .cell-code}\n## perform knn classification\n# Applying k-NN classification with 5 neighbors\nknn = KNeighborsClassifier(n_neighbors=5) ## make an instance of the KNeighborsClassifier class\n# and set the n_neighbors parameter to be 5. \n\n# Use the fit method to fit the model to the training data\nknn.fit(X_train, y_train)\nknn\n```\n:::\n\n\n## Once the model is fit...\n\n-We can look at its attributes (ex: `.classes_`) which gives the class labels as known to the classifier\n\n::: {#98e6c27c .cell output-location='fragment' execution_count=31}\n``` {.python .cell-code}\nprint(knn.classes_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Adelie' 'Chinstrap' 'Gentoo']\n```\n:::\n:::\n\n\n. . . \n\n-And use fitted model to predict species for test data\n\n::: {#ebf0dc47 .cell output-location='fragment' execution_count=32}\n``` {.python .cell-code}\n# Use the predict method on the test data to get the predictions for the test data\ny_pred = knn.predict(X_test)\n\n# Also can take a look at the prediction probabilities, \n# and use the .classes_ attribute to put the column labels in the right order\nprobs = pd.DataFrame(\n    knn.predict_proba(X_test),\n    columns = knn.classes_)\nprobs['y_pred'] = y_pred\n\nprint(\"Predicted probabilities: \\n\", probs.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted probabilities: \n    Adelie  Chinstrap  Gentoo     y_pred\n0     1.0        0.0     0.0     Adelie\n1     0.0        0.0     1.0     Gentoo\n2     1.0        0.0     0.0     Adelie\n3     0.0        0.6     0.4  Chinstrap\n4     1.0        0.0     0.0     Adelie\n```\n:::\n:::\n\n\n## Scatterplot for k-NN classification of test data\n\n<div class=\"clean-text\"> \n\n- Create dataframe of unscaled X_test, `bill_length_mm`, and `bill_depth_mm`.\n- Add to it the actual and predicted species labels\n\n::: {#ad76d8cf .cell output-location='fragment' execution_count=33}\n``` {.python .cell-code}\n## First unscale the test data\nX_test_unscaled = scaler.inverse_transform(X_test)\n\n## create dataframe \npenguins_test = pd.DataFrame(\n    X_test_unscaled,\n    columns=['bill_length_mm', 'bill_depth_mm']\n)\n\n## add actual and predicted species \npenguins_test['y_actual'] = y_test.values\npenguins_test['y_pred'] = y_pred\npenguins_test['correct'] = penguins_test['y_actual'] == penguins_test['y_pred']\n\nprint(\"Results: \\n\", penguins_test.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResults: \n    bill_length_mm  bill_depth_mm   y_actual     y_pred  correct\n0            39.5           16.7     Adelie     Adelie     True\n1            46.9           14.6     Gentoo     Gentoo     True\n2            42.1           19.1     Adelie     Adelie     True\n3            49.8           17.3  Chinstrap  Chinstrap     True\n4            41.1           18.2     Adelie     Adelie     True\n```\n:::\n:::\n\n\n</div>\n\n## Plotnine scatterplot for k-NN classification of test data\n\nTo see how well our model did at classifying the remaining penguins...\n\n::: {#ab2a0850 .cell output-location='slide' execution_count=34}\n``` {.python .cell-code}\n## Build the plot\nplot3 = (ggplot(penguins_test, aes(x=\"bill_length_mm\", y=\"bill_depth_mm\", \ncolor=\"y_actual\", fill = 'y_pred', shape = 'correct'))\n + geom_point(size=4, stroke=1.1)  # Stroke controls outline thickness\n + scale_shape_manual(values={True: 'o', False: '^'})  # Circle and triangle\n + ggtitle(\"k-NN Classification Results\")\n + theme_bw())\n\ndisplay(plot3)\n```\n\n::: {.cell-output .cell-output-display}\n![](session4v2_slides_files/figure-revealjs/cell-35-output-1.png){width=960 height=480}\n:::\n:::\n\n\n## Visualizing Decision Boundary with seaborn and matplotlib\n\n::: {#18a591b9 .cell output-location='slide' execution_count=35}\n``` {.python .cell-code code-line-numbers=\"1-6|8-22|24-27|\"}\nfrom sklearn.inspection import DecisionBoundaryDisplay\nfrom sklearn.preprocessing import LabelEncoder\n\n# Create and fit label encoder for y (just makes y numeric because it makes the scatter plot happy)\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Create the plot objects\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Create display object\ndisp = DecisionBoundaryDisplay.from_estimator(\n    knn,\n    X_test,\n    response_method = 'predict',\n    plot_method = 'pcolormesh',\n    xlabel = \"bill_length_scaled\",\n    ylabel = \"bill_depth_scaled\",\n    shading = 'auto',\n    alpha = 0.5,\n    ax = ax\n)\n\n# Use method from display object to create scatter plot\nscatter = disp.ax_.scatter(X_scaled[:,0], X_scaled[:,1], c=y_encoded, edgecolors = 'k')\ndisp.ax_.legend(scatter.legend_elements()[0], knn.classes_, loc = 'lower left', title = 'Species')\n_ = disp.ax_.set_title(\"Penguin Classification\")\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](session4v2_slides_files/figure-revealjs/cell-36-output-1.png){width=959 height=671}\n:::\n:::\n\n\n## Evaluate KNN performance\n\n<div class=\"clean-text\"> \nTo check the performance of our KNN classifier, we can check the accuracy score and print a classification report.  \n- `accuracy_score` and `classification_report` are both functions!  \n- They are not unique to scikit-learn classes so it makes sense for them to be functions not methods  \n\n</div> \n\n::: {#f0324257 .cell output-location='fragment' execution_count=36}\n``` {.python .cell-code}\n## eval knn performance\nknn_accuracy = accuracy_score(y_test, y_pred)\nprint(f\"k-NN Accuracy: {knn_accuracy:.2f}\")\nprint(\"Classification Report: \\n\", classification_report(y_test, y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk-NN Accuracy: 0.94\nClassification Report: \n               precision    recall  f1-score   support\n\n      Adelie       0.98      0.98      0.98        48\n   Chinstrap       0.80      0.89      0.84        18\n      Gentoo       0.97      0.91      0.94        34\n\n    accuracy                           0.94       100\n   macro avg       0.92      0.93      0.92       100\nweighted avg       0.94      0.94      0.94       100\n\n```\n:::\n:::\n\n\n## Make a Summary Table of Metrics for Both Models\n\n::: {#08620054 .cell output-location='fragment' execution_count=37}\n``` {.python .cell-code}\nsummary_table = pd.DataFrame({\n    \"Metric\": [\"k-Means Adjusted Rand Index\", \"k-NN Accuracy\"],\n    \"Value\": [kmeans_ari, knn_accuracy]\n})\n(\n    GT(summary_table)\n    .tab_header(title = \"Model Results Summary\")\n    .fmt_number(columns = \"Value\", n_sigfig = 2)\n    .tab_options(table_font_size = 20)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div id=\"ewuosoqwip\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#ewuosoqwip table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#ewuosoqwip thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#ewuosoqwip p { margin: 0; padding: 0; }\n #ewuosoqwip .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 20; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #ewuosoqwip .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #ewuosoqwip .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #ewuosoqwip .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #ewuosoqwip .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #ewuosoqwip .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #ewuosoqwip .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #ewuosoqwip .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #ewuosoqwip .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #ewuosoqwip .gt_column_spanner_outer:first-child { padding-left: 0; }\n #ewuosoqwip .gt_column_spanner_outer:last-child { padding-right: 0; }\n #ewuosoqwip .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #ewuosoqwip .gt_spanner_row { border-bottom-style: hidden; }\n #ewuosoqwip .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #ewuosoqwip .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #ewuosoqwip .gt_from_md> :first-child { margin-top: 0; }\n #ewuosoqwip .gt_from_md> :last-child { margin-bottom: 0; }\n #ewuosoqwip .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #ewuosoqwip .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #ewuosoqwip .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #ewuosoqwip .gt_row_group_first td { border-top-width: 2px; }\n #ewuosoqwip .gt_row_group_first th { border-top-width: 2px; }\n #ewuosoqwip .gt_striped { background-color: rgba(128,128,128,0.05); }\n #ewuosoqwip .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #ewuosoqwip .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #ewuosoqwip .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #ewuosoqwip .gt_left { text-align: left; }\n #ewuosoqwip .gt_center { text-align: center; }\n #ewuosoqwip .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #ewuosoqwip .gt_font_normal { font-weight: normal; }\n #ewuosoqwip .gt_font_bold { font-weight: bold; }\n #ewuosoqwip .gt_font_italic { font-style: italic; }\n #ewuosoqwip .gt_super { font-size: 65%; }\n #ewuosoqwip .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #ewuosoqwip .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal\">Model Results Summary</td>\n  </tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Metric\">Metric</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Value\">Value</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">k-Means Adjusted Rand Index</td>\n    <td class=\"gt_row gt_right\">0.82</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">k-NN Accuracy</td>\n    <td class=\"gt_row gt_right\">0.94</td>\n  </tr>\n</tbody>\n\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n## Key Takeaways from This Session\n\n<div class=\"clean-text\"> \n<p style=\"font-size: 1.25em\"> \n</p>\n<ul style=\"font-size: 1.1em; margin: 0 auto;\">\n  <li><strong>Python workflows rely on object-oriented structures in addition to functions:</strong><br>\n   Understanding the OOP paradigm makes Python a lot easier!</li>\n  <li><strong>Everything is an object!</strong></li>\n  <li><strong>Duck Typing:</strong><br>\n  If an object has a method, that method can be called regardless of the object type. Caveat being, make sure the arguments (if any) in the method are specified correctly for all objects!\n  </li>\n    <li>Python packages use <strong>common methods</strong> that make it easy to change between model types without changing a lot of code. \n  </li>\n</ul>\n</div>\n\n## Additional Insights\n\n<div class=\"clean-text\" style=\"font-size: 1.0em; line-height: 1.4;\">\n  <ul>\n    <li>\n      <strong>Predictable APIs enable seamless model switching:</strong><br>\n      Swapping models like <code>LogisticRegression</code> ‚Üí <code>RandomForestClassifier</code> usually requires minimal code changes.\n    </li>\n    <li style=\"margin-top: .7em;\">\n      <strong>scikit-learn prioritizes interoperability:</strong><br>\n      Its consistent class design integrates with tools like <code>Pipeline</code>, <code>GridSearchCV</code>, and <code>cross_val_score</code>.\n    </li>\n    <li style=\"margin-top: .7em;\">\n      <strong>Class attributes improve model transparency:</strong><br>\n      Access attributes like <code>.coef_</code>, <code>.classes_</code>, and <code>.feature_importances_</code> for model interpretation and debugging.\n    </li>\n    <li style=\"margin-top: .7em;\">\n      <strong>Custom classes are central to deep learning:</strong><br>\n      Frameworks like PyTorch and TensorFlow require you to define your own model classes by subclassing base models.\n    </li>\n    <li style=\"margin-top: .7em;\">\n      <strong>Mixins support modular design:</strong><br>\n      Mixins (e.g., <code>ClassifierMixin</code>) let you add specific functionality without duplicating code.\n    </li>\n  </ul>\n</div>\n\n## **Pre-Reading for This Session**  \n\n<div class=\"clean-text\">\n\n- [Scikit-learn Documentation](https://scikit-learn.org/stable/user_guide.html)  \n- [Introduction to OOP in Python (Real Python)](https://realpython.com/python3-object-oriented-programming/)  \n- [Plotnine Reference](https://plotnine.org/reference/)\n- [Seaborn Reference](https://seaborn.pydata.org/tutorial/function_overview.html)\n\n</div>\n\n",
    "supporting": [
      "session4v2_slides_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}