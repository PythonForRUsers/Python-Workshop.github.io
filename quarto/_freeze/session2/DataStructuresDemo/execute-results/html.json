{
  "hash": "349b0d52fbce34f9e111d583c69bec6d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Session 2: Python Data Structures\"\njupyter: python3\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    background-color: lavenderblush\n    incremental: true\n    code-copy: true\n    smaller: true\n    code-block-height: 750px\n    highlight-style: pygments\n    width: 1400\n    height: 800\nexecute:\n  freeze: auto\n  eval: true\n  echo: true\n---\n\n\n\n\n## Links {.scrollable background-color=\"lavenderblush\"}\n\n<a href=\"https://docs.python.org/3/tutorial/datastructures.html\" class=\"link-block\">\n    <img src=\"../icons/csv.png\" alt=\"Dataset\">\n    <p>Guide to Python Data Structures</p>\n</a>\n<a href=\"https://www.kaggle.com/datasets/erdemtaha/cancer-data\" class=\"link-block\">\n    <img src=\"../icons/code.png\" alt=\"File\">\n    <p>Cancer Dataset</p>\n</a>\n\n## Topic 1: Lists {.scrollable background-color=\"lavenderblush\"}\n\n\nThe most important thing about lists\n\nIn Python, lists are mutable, meaning their elements can be changed after the list is created, allowing for modification such as adding, removing, or updating items. This flexibility makes lists powerful for handling dynamic collections of data.\n\n. . .\n\nWe will learn how to do things such as:\n\n\n- Create lists\n- Modify lists\n- Sort lists\n- Loop over elements of a list with a for-loop or using list comprehension\n- Slice a list\n- Append to a list\n\n\n## Lists {.scrollable background-color=\"lavenderblush\"}\n\n- To create a list:\n\n::: {#a23b3fbd .cell class='fragment' output-location='fragment' execution_count=1}\n``` {.python .cell-code}\nmy_list = [1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]\n```\n:::\n:::\n\n\n- A list is simply a collection of objects.  We can find the length of a list using the len() function:\n\n::: {#9b00b82b .cell class='fragment' output-location='fragment' execution_count=2}\n``` {.python .cell-code}\nmy_list=[1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]\nlen(my_list)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n7\n```\n:::\n:::\n\n\n## Lists (continued) {.scrollable background-color=\"lavenderblush\"}\n\n- In Python, lists are objects like all other data types, and the class for lists is named 'list' with a lowercase 'L'. \n\n- To transform another Python object into a list, you can use the list() function, which is essentially the constructor of the list class. This function accepts a single argument: an iterable. So, you can use it to turn any iterable, such as a range, set, or tuple, into a list of concrete values.\n\n- Python indices begin at 0.  In addition, certain built-in python functions such as range will terminate at n-1 in the second argument.\n\n::: {#e80c6fc8 .cell class='fragment' output-location='fragment' execution_count=3}\n``` {.python .cell-code}\nfirst_range=range(5)\nfirst_range_list=list(first_range)\nprint(first_range_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {#c30b8ef3 .cell class='fragment' output-location='fragment' execution_count=4}\n``` {.python .cell-code}\nsecond_range=range(5,10)\nsecond_range_list=list(second_range)\nprint(second_range_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\n## Accessing Python list elements {.scrollable background-color=\"lavenderblush\"}\n\nTo access an individual list element, you need to know its position. Since python starts counting at 0, the first element is in position 0, and the second element is in position 1. You can also access nested elements within a list, or access the list in reverse.\n\n. . .\n\nExamples using my_list from above\n\n::: {#a7257cf5 .cell class='fragment' output-location='fragment' execution_count=5}\n``` {.python .cell-code}\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]\n```\n:::\n:::\n\n\n::: {#6dea6a02 .cell class='fragment' output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nexample_1=my_list[0]\n\nexample_2=my_list[6][1]\n\nexample_3=my_list[-1]\n\nprint(example_1, example_2, example_3)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 z [4, 'z']\n```\n:::\n:::\n\n\n## Mutability of lists {.scrollable background-color=\"lavenderblush\"}\n\nSince lists are mutable objects, we can directly change their elements.\n\n::: {#c7afe78c .cell class='fragment' output-location='fragment' execution_count=7}\n``` {.python .cell-code}\nsome_list=[1,2,3]\nprint(some_list)\n\nsome_list[0]=\"hello\"\nprint(some_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n['hello', 2, 3]\n```\n:::\n:::\n\n\n## Appending an element to a list {.scrollable background-color=\"lavenderblush\"}\n\nWhen calling append on a list, we append an object to the end of the list:\n\n::: {#a92ba222 .cell class='fragment' output-location='fragment' execution_count=8}\n``` {.python .cell-code}\nprint(my_list)\n\nmy_list.append(5)\n\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3.2, 'a', 'b', 'c', [4, 'z']]\n[1, 2, 3.2, 'a', 'b', 'c', [4, 'z'], 5]\n```\n:::\n:::\n\n\n## Combining lists {.scrollable background-color=\"lavenderblush\"}\n\nWe can combine lists with the \"+\" operator. This keeps the original lists intact\n\n::: {#0d63e7d8 .cell class='fragment' output-location='fragment' execution_count=9}\n``` {.python .cell-code}\nlist_1=[1,2,3]\n\nlist_2=['a','b','c']\n\ncombined_lists=list_1+list_2\n\nprint(combined_lists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 'a', 'b', 'c']\n```\n:::\n:::\n\n\n. . .\n\nAnother method is to extend one list onto another.\n\n::: {#094acb14 .cell class='fragment' output-location='fragment' execution_count=10}\n``` {.python .cell-code}\nlist_1=[1,2,3]\n\nlist_2=['a','b','c']\n\nlist_1.extend(list_2)\n\nprint(list_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 'a', 'b', 'c']\n```\n:::\n:::\n\n\n## .pop() method {.scrollable background-color=\"lavenderblush\"}\n\nThe .pop() method removes and returns the last item by default unless you give it an index argument. If you're familiar with stacks, this method as well as .append() can be used to create one!\n\n::: {#bbb2ca70 .cell class='fragment' output-location='fragment' execution_count=11}\n``` {.python .cell-code}\nlist_1=[1,2,3]\n\nelement_1=list_1.pop()\nelement_2=list_1.pop(1)\n\nprint(element_1, element_2)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 2\n```\n:::\n:::\n\n\n## Deleting items by index {.scrollable background-color=\"lavenderblush\"}\n\ndel removes an item without returning anything. In fact, you can delete any object, including the entire list, using del:\n\n::: {#35006275 .cell class='fragment' output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nlist_1=[1,2,3]\n\ndel list_1[0]\n\nprint(list_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 3]\n```\n:::\n:::\n\n\n## Deleting items by value {.scrollable background-color=\"lavenderblush\"}\n\nThe .remove() method deletes a specific value from the list. This method will remove the first occurrence of the given object in a list. \n\n::: {#2f722a50 .cell class='fragment' output-location='fragment' execution_count=13}\n``` {.python .cell-code}\nlist_1=[1,2,3]\n\nlist_1.remove(1)\n\nprint(list_1)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 3]\n```\n:::\n:::\n\n\n## Lists vs. sets, and deleting duplicates from a list {.scrollable background-color=\"lavenderblush\"}\n\nThe difference between a list and a set:\n\n- A set is an unordered collection of distinct elements.\n- A list is ordered and can contain repeats of an element. \n- Sets are denoted by curly brackets {}. We can use this knowledge to easily delete duplicates from a list, since there is no built-in method to do so.\n\n::: {#3a3fb95e .cell class='fragment' output-location='fragment' execution_count=14}\n``` {.python .cell-code}\nlist_1=[1,2,3,1,2]\nprint(list_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 1, 2]\n```\n:::\n:::\n\n\n::: {#2810ff17 .cell class='fragment' output-location='fragment' execution_count=15}\n``` {.python .cell-code}\nset_1=set(list_1)\nprint(set_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3}\n```\n:::\n:::\n\n\n::: {#05baa506 .cell class='fragment' output-location='fragment' execution_count=16}\n``` {.python .cell-code}\nlist_2=list(set_1)\nprint (list_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n```\n:::\n:::\n\n\n## Sorting a list {.scrollable background-color=\"lavenderblush\"}\n\nThere are two ways to sort a list in Python\n\n- .sort() modifies the original list itself. Nothing is returned.\n\n- .sorted() returns a new list, which is a sorted version of the original list.\n\n- .reverse=True: Use this parameter to sort the list in reverse order.\n\n::: {#5c167634 .cell class='fragment' output-location='fragment' execution_count=17}\n``` {.python .cell-code}\nnumber_list_1=[3,5,2,1,6,19]\nnumber_list_1.sort()\nprint(number_list_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 5, 6, 19]\n```\n:::\n:::\n\n\n::: {#a80032bd .cell class='fragment' output-location='fragment' execution_count=18}\n``` {.python .cell-code}\nnumber_list_2=sorted(number_list_1, reverse=True)\nprint(number_list_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[19, 6, 5, 3, 2, 1]\n```\n:::\n:::\n\n\n::: {#d8b28451 .cell class='fragment' output-location='fragment' execution_count=19}\n``` {.python .cell-code}\nalphabet_list_1=['a','z','e','b']\nalphabet_list_1.sort()\nprint(alphabet_list_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'e', 'z']\n```\n:::\n:::\n\n\n::: {#44455568 .cell class='fragment' output-location='fragment' execution_count=20}\n``` {.python .cell-code}\nalphabet_list_2=sorted(alphabet_list_1, reverse=True)\nprint(alphabet_list_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['z', 'e', 'b', 'a']\n```\n:::\n:::\n\n\n::: {#71b2c54e .cell class='fragment' output-location='fragment' execution_count=21}\n``` {.python .cell-code}\nmixed_list_1=[1,5,3,'a','c','b']\ntry:\n    mixed_list_1.sort()\n    print(mixed_list_1)\nexcept TypeError:\n    print(\"Can't sort a list of mixed elements\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCan't sort a list of mixed elements\n```\n:::\n:::\n\n\n## List comprehension {.scrollable background-color=\"lavenderblush\"}\n \nList comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list (or other object)\n\n::: {#d9bb9df3 .cell class='fragment' output-location='fragment' execution_count=22}\n``` {.python .cell-code}\n#Longer syntax with for loop\n\n\n#Example 1:\n\nsome_list=[1,2,3,'a', 'b', 'c']\nnew_list=[]\nfor item in some_list:\n    if type(item)==str:\n        new_list.append(item)\nprint(new_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'c']\n```\n:::\n:::\n\n\n::: {#aa251bcf .cell class='fragment' output-location='fragment' execution_count=23}\n``` {.python .cell-code}\n#Example 2:\n\nlowercase_list=['joe', 'sarah', 'emily']\ncapital_list=[]\nfor item in lowercase_list:\n    capital_item=item.upper()\n    capital_list.append(capital_item)\nprint(capital_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['JOE', 'SARAH', 'EMILY']\n```\n:::\n:::\n\n\n::: {#13280db1 .cell class='fragment' output-location='fragment' execution_count=24}\n``` {.python .cell-code}\n#Example 3:\n\nsome_string=\"patrick\"\npatrick_list=[]\nfor letter in some_string:\n    if letter=='t' or letter=='a':\n        patrick_list.append(letter)\nprint(patrick_list)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 't']\n```\n:::\n:::\n\n\n## Shorter syntax with list comprehension {.scrollable background-color=\"lavenderblush\"}\n\n::: {#37036c88 .cell class='fragment' output-location='fragment' execution_count=25}\n``` {.python .cell-code}\n#Example 1:\n\nsome_list=[1,2,3,'a', 'b', 'c']\nnew_list=[x for x in some_list if type(x)==str]\nprint(new_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 'b', 'c']\n```\n:::\n:::\n\n\n::: {#2197fb0e .cell class='fragment' output-location='fragment' execution_count=26}\n``` {.python .cell-code}\n#Example 2:\n\nlowercase_list=['joe', 'sarah', 'emily']\ncapital_list=[name.upper() for name in lowercase_list]\nprint(capital_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['JOE', 'SARAH', 'EMILY']\n```\n:::\n:::\n\n\n::: {#e0544eb6 .cell class='fragment' output-location='fragment' execution_count=27}\n``` {.python .cell-code}\n#Example 3:\n\nsome_string=\"patrick\"\npatrick_list=[x for x in some_string if x=='t' or x=='a']\nprint(patrick_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['a', 't']\n```\n:::\n:::\n\n\n## Topic 2: Tuples {.scrollable background-color=\"lavenderblush\"}\n\n- A tuple is similar to a list, but with one key difference. Tuples are immutable. This means that once you create a tuple, you cannot modify its elements. \n\n- Tuples are useful for storing data that should not be changed after creation, such as coordinates, days of the week, or fixed pairs.\n\n- Just like lists, tuples are objects, and the class for tuples is tuple. \n\n- To transform another Python object into a tuple, you can use the tuple() constructor. It accepts a single iterable, such as a list, range, or string.\n\n. . . \n\nTo create a tuple, you use parentheses () rather than square brackets [].\n\n::: {#84d8f686 .cell class='fragment' output-location='fragment' execution_count=28}\n``` {.python .cell-code}\n# Creating a tuple\nmy_tuple = (10, 20, 30)\n\n# Accessing elements by index\nprint(\"First element:\", my_tuple[0])\nprint(\"Last element:\", my_tuple[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFirst element: 10\nLast element: 30\n```\n:::\n:::\n\n\n## Mutability of Tuples {.scrollable background-color=\"lavenderblush\"}\n\n\nTuples are immutable, so you can’t modify their elements. Attempting to change a tuple will result in an error.\n\n::: {#220a326e .cell class='fragment' output-location='fragment' execution_count=29}\n``` {.python .cell-code}\n# Trying to modify a tuple element (this will raise an error)\ntry:\n    my_tuple[1] = 99\nexcept TypeError:\n    print(\"Tuples are immutable and cannot be changed!\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTuples are immutable and cannot be changed!\n```\n:::\n:::\n\n\n## Functions and Tuples {.scrollable background-color=\"lavenderblush\"}\n\n\nFunctions can return multiple values as a tuple. This is useful for returning multiple results in a single function call.\n\n::: {#ede44e19 .cell class='fragment' output-location='fragment' execution_count=30}\n``` {.python .cell-code}\n# Function that returns multiple values as a tuple\ndef min_max(nums):\n    return min(nums), max(nums)  # Returns a tuple of (min, max)\n\n# Calling the function and unpacking the tuple\n\nnumbers = [3, 7, 1, 5]\n\nour_tuple = min_max(numbers)\n\nmin_val, max_val = min_max(numbers) #Unpacking in the function call\n\nprint(our_tuple)\nprint(\"Min:\", min_val)\nprint(\"Max:\", max_val)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 7)\nMin: 1\nMax: 7\n```\n:::\n:::\n\n\n## Topic 3: Strings {.scrollable background-color=\"lavenderblush\"}\n\nYou can use single or double quotes to define a string (but keep it consistent!)\n\n::: {#81a41aa8 .cell class='fragment' output-location='fragment' execution_count=31}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\nprint(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . .\n\nYou can also create a multiline string using triple quotes:\n\n::: {#77f03665 .cell class='fragment' output-location='fragment' execution_count=32}\n``` {.python .cell-code}\nmulti_line_string = \"\"\"This is\na multiline\nstring.\"\"\"\nprint(multi_line_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is\na multiline\nstring.\n```\n:::\n:::\n\n\n## String Operations {.scrollable background-color=\"lavenderblush\"}\n \nYou can find the length of a string using the len() funtion, just like with lists.\n\n::: {#2f16f8a7 .cell class='fragment' output-location='fragment' execution_count=33}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\nprint(len(my_string))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n13\n```\n:::\n:::\n\n\n. . . \n\n## Accessing characters in a string {.scrollable background-color=\"lavenderblush\"}\n\nStrings are indexed like lists, with the first character having index 0. You can access individual characters using their index.\n\n::: {#60ee7601 .cell class='fragment' output-location='fragment' execution_count=34}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\n\n# First character\nfirst_char = my_string[0]\n\n# Last character (using negative indexing)\nlast_char = my_string[-1]\n\n# Accessing a range of characters (slicing)\nsubstring = my_string[0:5]\n\nprint(first_char, last_char, substring)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nH ! Hello\n```\n:::\n:::\n\n\n## Mutability of Strings {.scrollable background-color=\"lavenderblush\"}\n\nStrings are immutable!\n\nUnlike lists, strings cannot be changed after creation. If you try to change an individual character, you'll get an error.\n\n::: {#baa61dbe .cell class='fragment' output-location='fragment' execution_count=35}\n``` {.python .cell-code}\nmy_string = \"Hello\"\ntry:\n    my_string[0] = \"h\"  # This will raise an error\nexcept TypeError:\n    print(\"Strings are immutable!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStrings are immutable!\n```\n:::\n:::\n\n\n## Concatenating Strings {.scrollable background-color=\"lavenderblush\"}\n\nYou can concatenate (combine) strings using the + operator:\n\n::: {#b9c9fbd6 .cell class='fragment' output-location='fragment' execution_count=36}\n``` {.python .cell-code}\ngreeting = \"Hello\"\nname = \"Patrick\"\ncombined_string = greeting + \", \" + name + \"!\"\nprint(combined_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Patrick!\n```\n:::\n:::\n\n\n## String methods {.scrollable background-color=\"lavenderblush\"}\n\nPython provides many built-in methods for manipulating strings. Some common ones are:\n\n. . . \n\nupper() and lower()\nThese methods convert a string to uppercase or lowercase.\n\n::: {#d6c91b25 .cell class='fragment' output-location='fragment' execution_count=37}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\nprint(my_string.upper())\nprint(my_string.lower())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHELLO, WORLD!\nhello, world!\n```\n:::\n:::\n\n\n. . . \n\nstrip()\nThis method removes any leading or trailing whitespace from the string.\n\n::: {#5686fd4f .cell class='fragment' output-location='fragment' execution_count=38}\n``` {.python .cell-code}\nmy_string = \"   Hello, World!   \"\nprint(my_string.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n. . . \n\nreplace()\nYou can replace parts of a string with another string.\n\n::: {#31cb9e2b .cell class='fragment' output-location='fragment' execution_count=39}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\nnew_string = my_string.replace(\"World\", \"Patrick\")\nprint(new_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Patrick!\n```\n:::\n:::\n\n\n. . .\n\nThe split() method divides a string into a list of substrings based on a delimiter (default is whitespace).\n\n::: {#72746ab0 .cell class='fragment' output-location='fragment' execution_count=40}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\nwords = my_string.split()\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Hello,', 'World!']\n```\n:::\n:::\n\n\n::: {#edb8523f .cell class='fragment' output-location='fragment' execution_count=41}\n``` {.python .cell-code}\nanother_string=\"Hello-World!\"\nmore_words=another_string.split(\"-\")\nprint(more_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Hello', 'World!']\n```\n:::\n:::\n\n\n. . .\n\nThe join() method takes an iterable (like a list) and concatenates its elements into a string with a specified separator between them.\n\n::: {#877b707e .cell class='fragment' output-location='fragment' execution_count=42}\n``` {.python .cell-code}\nmy_list=['Hello,', 'my', 'name', 'is', 'Patrick']\n\nmy_string=' '.join(my_list)\n\nprint(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, my name is Patrick\n```\n:::\n:::\n\n\n## f-strings (Python 3.6+) {.scrollable background-color=\"lavenderblush\"}\n\nYou can insert variables directly into strings using f-strings.\n\n::: {#d9d83cc0 .cell class='fragment' output-location='fragment' execution_count=43}\n``` {.python .cell-code}\nname = \"Patrick\"\nage = 30\nformatted_string = f\"My name is {name} and I am {age} years old.\"\nprint(formatted_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Patrick and I am 30 years old.\n```\n:::\n:::\n\n\n::: {#166c6036 .cell class='fragment' output-location='fragment' execution_count=44}\n``` {.python .cell-code}\nmy_string = \"Hello, World!\"\n\n# Extract all vowels from the string\nvowels = str([char for char in my_string if char.lower() in \"aeiou\"])\nprint(vowels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['e', 'o', 'o']\n```\n:::\n:::\n\n\n## String Slicing {.scrollable background-color=\"lavenderblush\"}\n\nWe will slice a string using different combinations of start, end, and step to extract different parts of the string.\n\n::: {#83aa912c .cell class='fragment' output-location='fragment' execution_count=45}\n``` {.python .cell-code}\n#To slice a string, follow the string[start:end:step] format\n\n# Original string\nmy_string = \"Python is awesome!\"\nprint(f\"Original string: {my_string}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal string: Python is awesome!\n```\n:::\n:::\n\n\n::: {#3b9a7f56 .cell class='fragment' output-location='fragment' execution_count=46}\n``` {.python .cell-code}\n# Slice from index 0 to 6 (not inclusive), stepping by 1 (default)\n# This will extract \"Python\"\nsubstring_1 = my_string[0:6]\nprint(f\"Substring 1 (0:6): {substring_1}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubstring 1 (0:6): Python\n```\n:::\n:::\n\n\n::: {#b6f17819 .cell class='fragment' output-location='fragment' execution_count=47}\n``` {.python .cell-code}\n# Slice from index 7 to the end of the string, stepping by 1 (default)\n# This will extract \"is awesome!\"\nsubstring_2 = my_string[7:]\nprint(f\"Substring 2 (7:): {substring_2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubstring 2 (7:): is awesome!\n```\n:::\n:::\n\n\n::: {#7540248b .cell class='fragment' output-location='fragment' execution_count=48}\n``` {.python .cell-code}\n# Slice the entire string but take every second character\n# This will extract \"Pto saeoe\"\nsubstring_3 = my_string[::2]\nprint(f\"Substring 3 (every second character): {substring_3}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubstring 3 (every second character): Pto saeoe\n```\n:::\n:::\n\n\n::: {#7bef6770 .cell class='fragment' output-location='fragment' execution_count=49}\n``` {.python .cell-code}\n# Slice from index 0 to 6, stepping by 2\n# This will extract \"Pto\"\nsubstring_4 = my_string[0:6:2]\nprint(f\"Substring 4 (0:6:2): {substring_4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubstring 4 (0:6:2): Pto\n```\n:::\n:::\n\n\n::: {#c128948b .cell class='fragment' output-location='fragment' execution_count=50}\n``` {.python .cell-code}\n# Slice from index 11 to 6, stepping backward by -1\n# This will extract \"wa si\" (reverse slice)\nsubstring_5 = my_string[11:6:-1]\nprint(f\"Substring 5 (11:6:-1): {substring_5}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubstring 5 (11:6:-1): wa si\n```\n:::\n:::\n\n\n## Topic 4: Dictionaries {.scrollable background-color=\"lavenderblush\"}\n\n\n- A dictionary is a collection in Python that stores data as key-value pairs. \n- It’s similar to a real-world dictionary where you look up a word (the key) to get its definition (the value). \n- In Python, dictionaries are mutable, meaning you can add, remove, and change items.\n\n. . . \n\nTo create a dictionary, use curly braces {}, with each key-value pair separated by a colon (:), and pairs separated by commas.\n\n::: {#1eb2f35a .cell class='fragment' output-location='fragment' execution_count=51}\n``` {.python .cell-code}\n# Creating a dictionary\nmy_dictionary = {\n    'name': 'Alice',\n    'age': 25,\n    'city': 'New York'\n}\nprint(my_dictionary)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 25, 'city': 'New York'}\n```\n:::\n:::\n\n\n## Dictionary Operations {.scrollable background-color=\"lavenderblush\"}\n\nAccessing dictionary values\n\n\n- To access a specific value in a dictionary, use the key in square brackets. \n- You can also use the .get() method, which returns None if the key does not exist, instead of raising an error.\n\n::: {#e6a823eb .cell class='fragment' output-location='fragment' execution_count=52}\n``` {.python .cell-code}\nprint(my_dictionary['name'])      # Using key\nprint(my_dictionary.get('age'))   # Using .get() method\nprint(my_dictionary.get('gender', 'Not specified'))  # Providing a default value\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice\n25\nNot specified\n```\n:::\n:::\n\n\n## Adding and updating dictionary items {.scrollable background-color=\"lavenderblush\"}\n\nDictionaries are mutable, so you can add new items or update existing ones using assignment.\n\n::: {#151f8bd6 .cell class='fragment' output-location='fragment' execution_count=53}\n``` {.python .cell-code}\nmy_dictionary['job'] = 'Engineer'        # Adding a new key-value pair\nmy_dictionary['age'] = 26                # Updating an existing value\nprint(my_dictionary)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 26, 'city': 'New York', 'job': 'Engineer'}\n```\n:::\n:::\n\n\n## Dictionary Methods {.scrollable background-color=\"lavenderblush\"}\n\nPython dictionaries have several useful methods for managing data:\n\n- keys(): Returns a list of all the keys in the dictionary.\n- values(): Returns a list of all values in the dictionary.\n- items(): Returns a list of key-value pairs as tuples.\n\n::: {#913899e1 .cell class='fragment' output-location='fragment' execution_count=54}\n``` {.python .cell-code}\n# Getting all keys\nprint(my_dictionary.keys())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_keys(['name', 'age', 'city', 'job'])\n```\n:::\n:::\n\n\n::: {#219bbb9d .cell class='fragment' output-location='fragment' execution_count=55}\n``` {.python .cell-code}\n# Getting all values\nprint(my_dictionary.values())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_values(['Alice', 26, 'New York', 'Engineer'])\n```\n:::\n:::\n\n\n::: {#ea197f57 .cell class='fragment' output-location='fragment' execution_count=56}\n``` {.python .cell-code}\n# Getting all key-value pairs\nprint(my_dictionary.items())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_items([('name', 'Alice'), ('age', 26), ('city', 'New York'), ('job', 'Engineer')])\n```\n:::\n:::\n\n\n## Python Dictionaries for Cancer Research Data {.scrollable background-color=\"lavenderblush\"}\n\nIn cancer research, dictionaries can be used to store patient data, genetic mutations, and statistical results as key-value pairs. This allows for easy lookup, organization, and analysis of data.\n\n::: {#d0236b53 .cell class='fragment' output-location='fragment' execution_count=57}\n``` {.python .cell-code}\n#Let’s create a dictionary to store basic patient information, where each patient has a unique ID, and each ID maps to a dictionary containing information about the patient’s age, cancer type, and stage.\n\n# Dictionary of patients with nested dictionaries\npatient_data = {\n    'P001': {'age': 50, 'cancer_type': 'Lung Cancer', 'stage': 'II'},\n    'P002': {'age': 60, 'cancer_type': 'Breast Cancer', 'stage': 'I'},\n    'P003': {'age': 45, 'cancer_type': 'Melanoma', 'stage': 'III'}\n}\n\nprint(patient_data)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'P001': {'age': 50, 'cancer_type': 'Lung Cancer', 'stage': 'II'}, 'P002': {'age': 60, 'cancer_type': 'Breast Cancer', 'stage': 'I'}, 'P003': {'age': 45, 'cancer_type': 'Melanoma', 'stage': 'III'}}\n```\n:::\n:::\n\n\n. . .\n\nYou can access a patient’s information using their unique ID. To access nested data, chain the keys. For example, to retrieve the cancer type of a specific patient, you’d use the following:\n\n::: {#56f3b135 .cell class='fragment' output-location='fragment' execution_count=58}\n``` {.python .cell-code}\n# Accessing specific information\n\npatient_id = 'P002'\ncancer_type = patient_data[patient_id]['cancer_type']\nprint(f\"Cancer type for {patient_id}: {cancer_type}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCancer type for P002: Breast Cancer\n```\n:::\n:::\n\n\n::: {#ed0d6d48 .cell class='fragment' output-location='fragment' execution_count=59}\n``` {.python .cell-code}\n# Updating a patient’s stage\npatient_data['P003']['stage'] = 'IV'\nprint(f\"Updated stage for P003: {patient_data['P003']['stage']}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUpdated stage for P003: IV\n```\n:::\n:::\n\n\n## Adding and Removing Data {.scrollable background-color=\"lavenderblush\"}\n\nNew patient data can be added using assignment, and pop() or del can remove a patient’s data.\n\n::: {#ccf41d66 .cell class='fragment' output-location='fragment' execution_count=60}\n``` {.python .cell-code}\n# Adding a new patient\npatient_data['P004'] = {'age': 70, 'cancer_type': 'Prostate Cancer', 'stage': 'II'}\nprint(\"Added new patient:\", patient_data['P004'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdded new patient: {'age': 70, 'cancer_type': 'Prostate Cancer', 'stage': 'II'}\n```\n:::\n:::\n\n\n::: {#e9b5ffad .cell class='fragment' output-location='fragment' execution_count=61}\n``` {.python .cell-code}\n# Removing a patient\nremoved_patient = patient_data.pop('P001')\nprint(\"Removed patient:\", removed_patient)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRemoved patient: {'age': 50, 'cancer_type': 'Lung Cancer', 'stage': 'II'}\n```\n:::\n:::\n\n\n## Dictionary Methods {.scrollable background-color=\"lavenderblush\"}\n\nDictionaries allow you to retrieve keys, values, or entire key-value pairs. Here’s how to use these methods to get an overview of the data.\n\nkeys(): Retrieves all patient IDs.\nvalues(): Retrieves all patient records.\nitems(): Retrieves patient records as key-value pairs\n\n. . .\n\nFurther Example\n\n::: {#400cee0e .cell class='fragment' output-location='fragment' execution_count=62}\n``` {.python .cell-code}\n# Getting all patient IDs\nprint(\"Patient IDs:\", patient_data.keys())\n\n# Getting all patient details\nprint(\"Patient Details:\", patient_data.values())\n\n# Looping through each patient's data\nfor patient_id, details in patient_data.items():\n    print(f\"Patient {patient_id} - Age: {details['age']}, Cancer Type: {details['cancer_type']}, Stage: {details['stage']}\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPatient IDs: dict_keys(['P002', 'P003', 'P004'])\nPatient Details: dict_values([{'age': 60, 'cancer_type': 'Breast Cancer', 'stage': 'I'}, {'age': 45, 'cancer_type': 'Melanoma', 'stage': 'IV'}, {'age': 70, 'cancer_type': 'Prostate Cancer', 'stage': 'II'}])\nPatient P002 - Age: 60, Cancer Type: Breast Cancer, Stage: I\nPatient P003 - Age: 45, Cancer Type: Melanoma, Stage: IV\nPatient P004 - Age: 70, Cancer Type: Prostate Cancer, Stage: II\n```\n:::\n:::\n\n\n## Topic 5: Functions vs Methods in Python {.scrollable background-color=\"lavenderblush\"}\n\nWhat’s the difference?\n\n| Concept    | Function                                | Method                                           |\n|------------|-----------------------------------------|--------------------------------------------------|\n| Definition | A block of code that performs an action | A function that is **associated with an object** |\n| Called on  | Standalone / with parameters            | Called **on** an object (e.g., a string or list) |\n| Syntax     | `function(arg)`                         | `object.method()`                                |\n| Example    | `len(\"hello\")`                          | `\"hello\".upper()`                                |\n\n\n\n## Function Example {.scrollable background-color=\"lavenderblush\"}\n\n::: {#2702033a .cell class='fragment' output-location='fragment' execution_count=63}\n``` {.python .cell-code}\n# Define your own function\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))  # Hello, Alice!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\n```\n:::\n:::\n\n\n::: {#f63e1fea .cell class='fragment' output-location='fragment' execution_count=64}\n``` {.python .cell-code}\n# Use a built-in function\nwords = [\"Python\", \"Data\", \"Science\"]\nprint(len(words))  # 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n## Method Example {.scrollable background-color=\"lavenderblush\"}\n\n::: {#accdc124 .cell class='fragment' output-location='fragment' execution_count=65}\n``` {.python .cell-code}\n# 'upper()' is a method of string objects\nname = \"patrick\"\nprint(name.upper())  # Output: PATRICK\nprint(name) #Why doesn't name.upper() modify the original string? What would we have to do so that name becomes permanently uppercase?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPATRICK\npatrick\n```\n:::\n:::\n\n\n::: {#51c50b44 .cell class='fragment' output-location='fragment' execution_count=66}\n``` {.python .cell-code}\n# 'append()' is a method of list objects\ncolors = [\"red\", \"blue\"]\ncolors.append(\"green\")\nprint(colors)  # ['red', 'blue', 'green']\n\n#Think back to the last example.  Why does colors permanently change when we use a method, but name did not?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['red', 'blue', 'green']\n```\n:::\n:::\n\n\n## Behind the Scenes {.scrollable background-color=\"lavenderblush\"}\n\n::: {#0b3d5cad .cell class='fragment' output-location='fragment' execution_count=67}\n``` {.python .cell-code}\n# This also works\nstr.upper(\"patrick\")  # Output: 'PATRICK'\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\n'PATRICK'\n```\n:::\n:::\n\n\n::: {#4761f5f5 .cell class='fragment' output-location='fragment' execution_count=68}\n``` {.python .cell-code}\n# But this is more common\n\"patrick\".upper()  # Output: 'PATRICK'\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\n'PATRICK'\n```\n:::\n:::\n\n\n. . .\n\nBoth work — but \"str.upper()\" is a method being called directly from the class.\n\n\n\n\n\n## You Try! {.scrollable background-color=\"lavenderblush\"}\n\nNavigate to the follow-along file and try the practice problems!\n\n",
    "supporting": [
      "DataStructuresDemo_files"
    ],
    "filters": [],
    "includes": {}
  }
}