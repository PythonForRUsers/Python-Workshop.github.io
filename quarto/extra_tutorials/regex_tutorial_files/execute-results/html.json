{
  "hash": "3b275e9acb31e154d3b7a17b2c9a7ba3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Extra Tutorial: Regular Expressions in Python'\nauthor: Python Group\nformat: \n    html:\n        output-file: \"regex_tutorial.html\"\n        toc: true\n        code-copy: true\n        code-line-numbers: true\n        link-external-icon: false\n        link-external-newwindow: true\n---\n\n\n\n\n<hr style=\"border: none; border-top: 2px solid #007bff; width: 100%;\">\n\n::: {#42348218 .cell execution_count=1}\n``` {.python .cell-code}\nimport re\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom tableone import TableOne\n\n\nmpg = sns.load_dataset(\"mpg\")\nprint(mpg.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  \n```\n:::\n:::\n\n\n::: {#6438cbcd .cell execution_count=2}\n``` {.python .cell-code}\nmpg.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 398 entries, 0 to 397\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   mpg           398 non-null    float64\n 1   cylinders     398 non-null    int64  \n 2   displacement  398 non-null    float64\n 3   horsepower    392 non-null    float64\n 4   weight        398 non-null    int64  \n 5   acceleration  398 non-null    float64\n 6   model_year    398 non-null    int64  \n 7   origin        398 non-null    object \n 8   name          398 non-null    object \ndtypes: float64(4), int64(3), object(2)\nmemory usage: 28.1+ KB\n```\n:::\n:::\n\n\n### Optional: Create a summary table using TableOne\n\nTo get a better idea of our dataset, we can create a summary table using the 'tableone' package. \n\n::: {#6138b536 .cell execution_count=3}\n``` {.python .cell-code}\ncontinuous = [\"mpg\", \"displacement\", \"horsepower\", \"weight\", \"acceleration\", \"model_year\"]\ncategorical = [\"origin\", \"cylinders\"]\n\nprint(\"Continuous:\", continuous, \"\\nCategorical:\", categorical, \"\\n\\n\")\n\ntable = TableOne(data=mpg, categorical=categorical, continuous=continuous, label_suffix=True)\nprint(\"MPG Summary:\\n\", table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nContinuous: ['mpg', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year'] \nCategorical: ['origin', 'cylinders'] \n\n\nMPG Summary:\n                                Missing         Overall\nn                                                  398\nmpg, mean (SD)                       0      23.5 (7.8)\ncylinders, n (%)        3                      4 (1.0)\n                        4                   204 (51.3)\n                        5                      3 (0.8)\n                        6                    84 (21.1)\n                        8                   103 (25.9)\ndisplacement, mean (SD)              0   193.4 (104.3)\nhorsepower, mean (SD)                6    104.5 (38.5)\nweight, mean (SD)                    0  2970.4 (846.8)\nacceleration, mean (SD)              0      15.6 (2.8)\nmodel_year, mean (SD)                0      76.0 (3.7)\norigin, n (%)           europe               70 (17.6)\n                        japan                79 (19.8)\n                        usa                 249 (62.6)\n\n```\n:::\n:::\n\n\nFrom the above summary table, we can see that we have both continuous and categorial variables, as well as some missing data. \n<hr style=\"border: none; border-top: 1px solid #f8f9fa; max-width: 950px;\">\n\n## 1. Filtering Rows with Matching Patterns using re.search()\n\n#### Get list of cars with make 'ford'\n\nIf we want to get a list of the cars with make 'ford' (equivalent to grep(\"ford\", mpg$name)):\n\nWe can use mpg.loc[] plus a filter to select all names containing 'ford'. \n\nWe create the filter using mpg['name'].apply() and a lambda function. \n\n::: {#ff00a29a .cell execution_count=4}\n``` {.python .cell-code}\nmpg.loc[mpg['name'].apply(lambda x: re.search(\"ford\", x) is not None), \n        'name'][1:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n5             ford galaxie 500\n17               ford maverick\n25                   ford f250\n32                  ford pinto\n36             ford torino 500\n40            ford galaxie 500\n43    ford country squire (sw)\n48                ford mustang\n61         ford pinto runabout\nName: name, dtype: object\n```\n:::\n:::\n\n\n#### OR\n\nWe can define our own grep function and use that!\n\nThere is a file called 'greppy.py' in the downloadables folder on github. You can import that to get an r-like grep function. The function details are also included below. \n\n::: {#e20876d0 .cell execution_count=5}\n``` {.python .cell-code}\ndef grep(pattern, text, values=False, ignore_case=False):\n    # Compile the regex pattern with the ignore_case flag if enabled\n    flags = re.IGNORECASE if ignore_case else 0\n    regex = re.compile(pattern, flags)\n\n    if values:\n        # Return the matching lines\n        return [line for line in text if regex.search(line)]\n    else:\n        # Return a list of booleans indicating matches\n        return [bool(regex.search(line)) for line in text]\n```\n:::\n\n\n::: {#7b1a1933 .cell execution_count=6}\n``` {.python .cell-code}\n## or, if you put 'greppy.py' from the 'Downloadable' folder in your working directory\nfrom greppy import grep\n```\n:::\n\n\nYou can also install greppy from github via: \n\n\n\n```{bash}\npip install git+https://github.com/daniv-20/greppy.git\n```\n\n::: {#15803722 .cell execution_count=7}\n``` {.python .cell-code}\nmatches = grep(\"ford\", mpg['name'], values = True)\nprint(matches[1:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['ford galaxie 500', 'ford maverick', 'ford f250', 'ford pinto', 'ford torino 500', 'ford galaxie 500', 'ford country squire (sw)', 'ford mustang', 'ford pinto runabout']\n```\n:::\n:::\n\n\n<hr style=\"border: none; border-top: 1px solid #f8f9fa; max-width: 950px;\">\n\n#### Filter Rows by Pattern\n\nIf we wanted to look for the mpg information on all cars of make 'ford', we can filter for rows where the 'name' contains 'ford'\n\n::: {#adff5820 .cell execution_count=8}\n``` {.python .cell-code}\nfiltered_rows = mpg[mpg['name'].apply(lambda x: bool(re.search('ford', x)))]\nprint(filtered_rows.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n4   17.0          8         302.0       140.0    3449          10.5   \n5   15.0          8         429.0       198.0    4341          10.0   \n17  21.0          6         200.0        85.0    2587          16.0   \n25  10.0          8         360.0       215.0    4615          14.0   \n32  25.0          4          98.0         NaN    2046          19.0   \n\n    model_year origin              name  \n4           70    usa       ford torino  \n5           70    usa  ford galaxie 500  \n17          70    usa     ford maverick  \n25          70    usa         ford f250  \n32          71    usa        ford pinto  \n```\n:::\n:::\n\n\n#### OR\n\n::: {#a49696f6 .cell execution_count=9}\n``` {.python .cell-code}\nfiltered_rows = mpg[grep(\"ford\", mpg['name'], values = False)]\nprint(filtered_rows.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n4   17.0          8         302.0       140.0    3449          10.5   \n5   15.0          8         429.0       198.0    4341          10.0   \n17  21.0          6         200.0        85.0    2587          16.0   \n25  10.0          8         360.0       215.0    4615          14.0   \n32  25.0          4          98.0         NaN    2046          19.0   \n\n    model_year origin              name  \n4           70    usa       ford torino  \n5           70    usa  ford galaxie 500  \n17          70    usa     ford maverick  \n25          70    usa         ford f250  \n32          71    usa        ford pinto  \n```\n:::\n:::\n\n\n<hr style=\"border: none; border-top: 2px solid #007bff; width: 100%; margin-top: 20px; margin-bottom: 20px;\">\n\n## 2. Substituting Values using re.sub()\n\nre.sub works like gsub to substitute values. For example, if we want to replace \"usa\" with \"United States\" in the 'origin' column: \n\n::: {#a1c8b3df .cell execution_count=10}\n``` {.python .cell-code}\n# Replace 'usa' with 'United States' in the 'origin' column\nmpg['origin'] = mpg['origin'].apply(lambda x: re.sub('usa', 'United States', x))\nprint(mpg.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year         origin                       name  \n0          70  United States  chevrolet chevelle malibu  \n1          70  United States          buick skylark 320  \n2          70  United States         plymouth satellite  \n3          70  United States              amc rebel sst  \n4          70  United States                ford torino  \n```\n:::\n:::\n\n\n<hr style=\"border: none; border-top: 2px solid #007bff; width: 100%; margin-top: 20px; margin-bottom: 20px;\">\n\n## 3. Extracting words with re.findall()\n\nIf we want to extract all words starting with 'chev' from the name column and put them in another column, we can use `re.findall()`.\n\n::: {#fba18492 .cell execution_count=11}\n``` {.python .cell-code}\n# Extract all words starting with 'chev' in the 'name' column\nmpg[\"chev\"] = mpg[\"name\"].apply(lambda x: re.findall(r\"\\bchev\\w*\", x))\nprint(mpg[[\"name\", \"chev\"]].head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        name                   chev\n0  chevrolet chevelle malibu  [chevrolet, chevelle]\n1          buick skylark 320                     []\n2         plymouth satellite                     []\n3              amc rebel sst                     []\n4                ford torino                     []\n```\n:::\n:::\n\n\n<strong><span style=\"color: #002569; font-size: 30px; font-weight: bold;\">How did we get \" </span><span style=\"color: #0074e0; font-size: 30px; font-weight: bold;\">r</span><span style=\"color: red; font-size: 30px; font-weight: bold;\">'\\\\b</span><span style=\"color: purple; font-size: 30px; font-weight: bold;\">chev</span><span style=\"color: darkgreen; font-size: 30px; font-weight: bold;\">\\\\w</span><span style=\"color: orange; font-size: 30px; font-weight: bold;\">*\\*'*</span><span style=\"color: #002569; font-size: 30px; font-weight: bold;\"> \" ?</span></strong>\n \n<span style=\"color: #0074e0; font-size:20px;font-weight: bold;\">1. **r - Raw String** </span>   \nThe r before the string indicates a raw string in Python. This tells Python not to treat backslashes (\\) as escape characters.  \nFor example, in a regular string, \\n represents a newline. In a raw string (r\"\\n\"), it is treated literally as backslash followed by n.\nWithout the r, the regex would need to be written as '\\\\bchev\\\\w*'.  \n\n<span style=\"color: red; font-size:20px;font-weight: bold;\">2. **\\b - Word Boundary**</span>  \n\\b matches a word boundary, which is the position between a word character (letters, digits, or underscore: [a-zA-Z0-9_]) and a non-word character.  \nIt ensures the match starts at the beginning of a word.  \nExamples:  \nIn \"chevrolet\", \\bchev matches because \"chev\" is at the beginning of the word.  \nIn \"123chev\", \\bchev does not match because \"chev\" is not preceded by a word boundary.  \nIn \"superchev\", \\bchev does not match because \"chev\" is in the middle of a word.  \n\n<span style=\"color: purple; font-size:20px;font-weight: bold;\">3. **chev - Literal Characters**</span>  \nThe sequence chev matches the literal string \"chev\".  \nThis part ensures the regex is looking specifically for words that begin with \"chev\".  \n\n<span style=\"color: darkgreen; font-size:20px;font-weight: bold;\">4. **\\w - Word Character**</span>  \n\\w matches any word character, which includes:  \nLetters (a-z, A-Z)  \nDigits (0-9)  \nUnderscore (_)  \nThis ensures the regex continues matching after \"chev\" if there are valid word characters.      \n\n<span style=\"color: orange; font-size:20px;font-weight: bold;\">5. **\\* - Zero or More**</span>    \n\\* is a quantifier that matches zero or more of the preceding character or group.  \nIn this case, \\w* means \"match zero or more word characters after 'chev'\".\nThis allows the regex to match \"chev\" alone or \"chevrolet\", \"chevalier\", etc.  \n\nFor more information on regular expression symbols, see <a href=\"https://www.pythoncheatsheet.org/cheatsheet/regular-expressions\">the regular expressions cheatsheet</a>.\n\n<hr style=\"border: none; border-top: 1px solid #f8f9fa; max-width: 950px;\">\n\n### We can also use expressions like this in our grep function\n\nIf we want to get all names beginning with 'chev', we can...\n\n::: {#10973cd2 .cell execution_count=12}\n``` {.python .cell-code}\ngrep(r'\\bchev\\w*', mpg['name'], values = True)[1:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['chevrolet impala',\n 'chevrolet monte carlo',\n 'chevy c20',\n 'chevrolet vega 2300',\n 'chevrolet chevelle malibu',\n 'chevrolet impala',\n 'chevrolet vega (sw)',\n 'chevrolet vega',\n 'chevrolet impala']\n```\n:::\n:::\n\n\n<hr style=\"border: none; border-top: 2px solid #007bff; width: 100%; margin-top: 20px; margin-bottom: 20px;\">\n\n## 4. Splitting Strings with re.split()\n\nIf we want to split the 'name' column into separate words, we can use `re.split()`.\n\n::: {#508e6b68 .cell execution_count=13}\n``` {.python .cell-code}\n# Split 'name' into separate words\nmpg['name_split'] = mpg['name'].apply(lambda x: re.split(r'\\s+', x))\nprint(mpg[['name', 'name_split']].head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        name                     name_split\n0  chevrolet chevelle malibu  [chevrolet, chevelle, malibu]\n1          buick skylark 320          [buick, skylark, 320]\n2         plymouth satellite          [plymouth, satellite]\n3              amc rebel sst              [amc, rebel, sst]\n4                ford torino                 [ford, torino]\n```\n:::\n:::\n\n\n<hr style=\"border: none; border-top: 2px solid #007bff; width: 100%; margin-top: 20px; margin-bottom: 20px;\">\n\n## 5. Add Optional Flags To Ignore Case\n\nFor case-insensitive matching (ignore.case = TRUE in R):\n\n::: {#a062414f .cell execution_count=14}\n``` {.python .cell-code}\nfiltered_rows = mpg[mpg['name'].apply(lambda x: bool(re.search('FORD', x, re.IGNORECASE)))]\nprint(filtered_rows.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n4   17.0          8         302.0       140.0    3449          10.5   \n5   15.0          8         429.0       198.0    4341          10.0   \n17  21.0          6         200.0        85.0    2587          16.0   \n25  10.0          8         360.0       215.0    4615          14.0   \n32  25.0          4          98.0         NaN    2046          19.0   \n\n    model_year         origin              name chev            name_split  \n4           70  United States       ford torino   []        [ford, torino]  \n5           70  United States  ford galaxie 500   []  [ford, galaxie, 500]  \n17          70  United States     ford maverick   []      [ford, maverick]  \n25          70  United States         ford f250   []          [ford, f250]  \n32          71  United States        ford pinto   []         [ford, pinto]  \n```\n:::\n:::\n\n\n#### OR\n\n::: {#f5dc703c .cell execution_count=15}\n``` {.python .cell-code}\nfiltered_rows = mpg[grep('FORD', mpg['name'], ignore_case = True)]\nprint(filtered_rows.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n4   17.0          8         302.0       140.0    3449          10.5   \n5   15.0          8         429.0       198.0    4341          10.0   \n17  21.0          6         200.0        85.0    2587          16.0   \n25  10.0          8         360.0       215.0    4615          14.0   \n32  25.0          4          98.0         NaN    2046          19.0   \n\n    model_year         origin              name chev            name_split  \n4           70  United States       ford torino   []        [ford, torino]  \n5           70  United States  ford galaxie 500   []  [ford, galaxie, 500]  \n17          70  United States     ford maverick   []      [ford, maverick]  \n25          70  United States         ford f250   []          [ford, f250]  \n32          71  United States        ford pinto   []         [ford, pinto]  \n```\n:::\n:::\n\n\n",
    "supporting": [
      "regex_tutorial_files"
    ],
    "filters": [],
    "includes": {}
  }
}