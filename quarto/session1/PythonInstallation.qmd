---
title: "Intro to Python"
author: "Python Group"
format: 
    html:
        output-file: "session1.html"
        toc: true
        css: ../styles.css
        code-copy: true
        code-line-numbers: false
        link-external-icon: false
        link-external-newwindow: true
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

## üîéWorkshop at a Glance:

The overall **goal** of the is to learn how to program in Python using modern, reproducible tools.

-   **Session 1** will help you set up a flexible, interactive, working environment for Python programming (Miniconda, VS Code IDE, Jupyter Notebook, etc.)

-   **Session 2 and 3** will focus on the Python basics such as data structure, list comprehensive, and functions.
    We will also learn data frame manipulations with `pandas`.

-   **Session 4** will introduce you to object-oriented programming (OOP) with examples from the statistics library `statsmodels` and machine learning library `scikit-learn`.

## ‚ùóWhat You'll Need for the Workshop

-   **Bring your laptop (Windows/MacOS)**

-   **Basic GitHub knowledge & MSK GitHub Enterprise account**‚ÄìThe workshop website is hosted on MSK Enterprise GitHub, which might require you logging in with MSK credentials to access links/download files.
    Check out [Biostatistics Resource Guide](https://rconnect.mskcc.org/resource-guide/101-trainings.html) for GitHub-related training.

-   **Install Miniconda and Visual Studio Code before session 1 (see this guide)**

    ::: callout-important
    When following the installation instructions in this article, we recommend that you install software on your MSK laptop or workstation.
    Downloading/installing software files on VDI is extremely slow and might not install at all if the software is too large.
    :::

## üìñ About this Guide

This handout is a required pre-read for the Introduction to Python workshop.
It serves as a follow-along guide to help you install Python, set up essential tools like Miniconda and VS Code, and prepare for coding in Python for the upcoming sessions.

Along the way, we will also discuss some important questions‚Äì***What makes Python useful? Why would we, as biostatisticians, want to learn it?*** You will get an overview of the key features of Python, what it can do in relation to biostatistics/bioinformatics research, and how it compared to R.
Later in the workshop, we will dive deeper into some of Python's features and functions through hands-on programming practices.

::: {.callout-tip icon="false"}
## **Learning objectives of the article**

üìù This handout walks you through installing the necessary tools and setting up your Python environment.
It‚Äôs a required pre-read ‚Äî please follow each step before the first workshop session.

**üí°Aim 1**: know key features of Python and its applications.

**üí°Aim 2**: know the steps to install Python through Miniconda/Anaconda Distribution.

**üí°Aim 3**: know what Python virtual environments are and how to use conda to install and manage them.

**üí°Aim 4**: know features of the Visual Studio Code (VS Code) integrated development environments (IDE) and steps to set up a Python project within it.
:::

# 1 Introduction to Python

## What is Python?

![](images/paste-1.png){width="220"}

> Python is a **high-level**, **interpreted**, and **general-purpose programming language** first developed by Guido van Rossum in 1991.

Python has gained much popularity in the past 20 years.
Its user group has expanded into a large and active scientific computing and developer community that spans numerous academic and industrial fields.
Nowadays, Python has a powerful ecosystem of [external packages (libraries)](https://pypi.org/) for data science, artificial intelligence, and software development.

Python is cross-platform and open-source.
In Python, you can easily install packages with the built-in installer `pip` or package manager `conda`, just as you do with `install.packages()` in R.

## What can Python do?

Just like R, Python is an open source and versatile programming language that allows users to perform a wide range of data analysis and computational tasks.
While R is particularly useful in statistical analysis and visualizations, Python has been used in many distinct areas, such as:

-   Machine Learning and Deep learning

-   Web Development

-   Scripting & Automation

-   Cloud Computing

-   Game Development

-   Cybersecurity

## Why learn Python‚Äìas Biostatisticians?

Within the field of biostatistics/ bioinformatics, Python has become a core tool for biomedical data analysis due to its versatility, reproducibility, and strong ecosystem of scientific libraries.
Below are some areas where Python can be useful and some essential libraries.

#### **Statistical analysis**

While R is the go-to tool for statistical analysis, Python has caught up with many equivalent libraries and functions:

-   `statsmodels`/ `scipy.stats` provide **regression modeling** and **hypothesis testing**.

-   `lifelines`/ `scikit-survival` support **survival analysis** and plotting.

#### **ML/DL ecosystem**

Python dominates in machine learning and AI development:

-   `scikit-learn` is a rich **machine learning** library that supports both supervised regression an dclassification (e.g., random forests, gradient boosting) and unsupervised clustering (e.g., K-means).

-   `TensorFlow`, `PyTorch` are **deep learning** libraries widely used for computer vision and natural language processing.

-   `optuna`, `Ray` can be integrated into ML/DL workflows for easy and efficient **model training, hyperparameter tuning, fine-tuning**, etc.

#### **Omics data analysis**

Emerging packages that provide standard omics data preprocessing and analysis pipelines allow Python to become increasingly popular in the field of bioinformatics:

-   `scanpy`, `anndata` are libraries for single-cell RNA-seq data loading, preprocessing, and analysis.

-   `Biopython` is a set of tools for biological computation that performs file parsering (BLAST, FASTA, GenBank, etc.), sequence analysis, clustering algorithms, etc.

-   `pysam` works with BAM/SAM/VCF files.

## Python vs R: Differences

While both programming languages are popular for data analysis and computation, Python and R differ in their underlying code structure, the scope of functionality, and the extensibility of tasks they can perform.
Here is a non-exhaustive summary of some key differences:

| Feature / Task | **R** | **Python** |
|------------------|---------------------------|---------------------------|
| **Programming logic** | Mostly function-oriented ‚Äì structured around **functions** | Function- **AND** object-oriented ‚Äì structured around **classes** |
| **General-purpose programming** | ‚ö†Ô∏è Less ideal ‚Äì designed mainly for working with data | ‚úÖ Strong ‚Äì ML & AI, software development, scripting, etc. |
| **Computational power** | ‚úÖ Vectorization allows operating on all elements of a vector at once <br> ‚úÖ Best for statistical analysis <br> ‚ö†Ô∏è Memory-intensive; often slow for reading large data and performing large computations | ‚úÖ Generally faster for loops <br> ‚úÖ Strong support for GPU computing <br> ‚úÖ Memory-efficient for handling large objects and complex computations |
| **Package availability** | ‚úÖ Excellent for statistical analysis (glm, survival, ggplot2) <br> ‚ö†Ô∏è Good options for ML (caret, mlr3) but few DL packages <br> ‚úÖ Great for omics-focused analysis (Bioconductor, ComplexHeatmap, Seurat) | ‚òëÔ∏è Improving on statistical packages (statsmodels, lifelines) <br> ‚úÖ Best for ML/DL (scikit-learn, pytorch, keras) <br> ‚òëÔ∏è Fewer established packages specialized in omics data <br> ‚úÖ Great for processing large omics datasets (scanpy, scvi-tools) |
| **IDE & Reproducible environments (notebooks etc.)** | ‚úÖ RStudio <br> ‚úÖ RMarkdown, Quarto | ‚úÖ VS Code, JupyterLab, PyCharm, Spyder, etc. <br> ‚úÖ Jupyter Notebooks, Quarto |

## Recommended Programs for Python Programming

Python integrates with tools like:

-   conda

<!-- -->

-   **VS Code IDE**: ideal for literate programming, sharing code + plots + narrative

-   **Jupyer Notebook / Quarto**: documents that combine code, output, and markdown

-   **Git**: version control for collaboration

Next, we will

# 2 Python Installation and Setup

There are many ways to do install Python locally.
For the purpose of the workshop, we recommend one way of installation via [Miniconda](https://www.anaconda.com/docs/getting-started/miniconda/main) that works universally across Windows and MacOS platforms.
Miniconda is a minimal version of the [Anaconda Distribution](https://www.anaconda.com/docs/getting-started/anaconda/main), an open-source distribution of Python designed for scientific computing, data science, machine learning, and AI development.
It comes with **Python**, the **conda** package manager, and a minimal number of libraries.

Miniconda is relatively lightweight compared to Anaconda, which adds on top of the Miniconda distribution the **Anaconda Navigator** **GUI** and over 300 pre-downloaded libraries.
While Anaconda can be a good alternative, here we choose Miniconda for better efficiency in the installation process.

![Difference between conda, miniconda, and Anaconda](images/anaconda-explained.png){fig-align="left" width="400"}

| Feature | Anaconda | Miniconda |
|------------------|------------------------------|------------------------|
| Size | ‚ö†Ô∏è\~3-4 GB (slow to download) | ‚úÖ\~400 MB (lightweight) |
| What is included? | conda, Python (latest version), 300+ popular packages, Anaconda Navigator | conda, Python (latest version), essential packages only |
| User-friendly? | ‚úÖGUI available (Anaconda Navigator) | ‚ö†Ô∏ècommand-line only ‚Äî `conda` |

: Anaconda vs. Miniconda

## ‚ñ∂Ô∏èFollow-Along: Install Miniconda (Python + conda)

Let's walk through installing **Minconda** .
For the latest Miniconda installers for Python 3.12, go to the Anaconda website: [https://www.anaconda.com/download/](https://www.anaconda.com/download/success#miniconda) and download the installer based on your system.
(Make sure you are downloading from the **Miniconda Installers** section, not Anaconda!*)*

#### Windows

1.  Navigate to the [Anaconda website](https://www.anaconda.com/download/success#miniconda).

2.  Download the Windows "**64-bit graphical installer**".

    -   **(Alternative)** Quick download through command line interface: [Quick command line install](https://www.anaconda.com/docs/getting-started/miniconda/install#quickstart-install-instructions)

3.  **Run the installer:**

    -   Click `Next >`. When asked to select the type of the installation, select the¬†`Just Me`¬†option.

    ![](images/anaconda-install-1.png){width="500"}

    ::: callout-note
    ## Installing for current user only

    You don't need to install for all users most of the time.
    This option requires admin privileges which you might not have on your MSK laptop.
    :::

    -   Keep the default for installation location.
        E.g., `C:\Users\<user_name>\AppData\Local\miniconda3`.

    -   Customize the installation options:

        -   ‚ùå *‚ÄúAdd Miniconda to my PATH environment variable‚Äù* ‚Äì **NOT** recommended

        -   ‚úÖ *"Register Miniconda3 as my default Python 3.12"*

        ![](images/miniconda-install.png)

    ::: callout-warning
    ## Do not add Miniconda to PATH

    It is recommended that you do not add Miniconda to system's PATH environment variable, as it might lead to conflicts with your other Python installations or accidentally break software using the system Python.

    Instead, you could later run `conda init` in **Anaconda Prompt** to configure the terminal shells (like PowerShell or Command Prompt) to recognize the `conda` command.
    :::

4.  Complete the installation.
    This might take a few minutes to complete.

5.  Check Installation

    -   Open the Start Menu and run **Anaconda Prompt**.

    -   Type the following command.

        ``` bash
        conda info
        ```

    -   You should see details about your current conda installation.
        This means that conda is properly installed and initialized.

#### **MacOS:**

1.  Go to [Anaconda website](https://www.anaconda.com/download/success#miniconda) and download the Mac **64-bit graphical installer**

    -   Alternatively, for a quick and silent download through command line check out: [Quick command line install](https://www.anaconda.com/docs/getting-started/miniconda/install#quickstart-install-instructions)

2.  Run the `.pkg` installer

3.  

## Installing packages with Conda

Conda is a cross-platform package and environment manager that comes with Miniconda.
You can use the following terminal command to install packages from the Anaconda repositories (also called ***channels***):

``` terminal
conda install
```

Conda supports more than just Python packages but numerous other programming languages like R, Java, etc.

::: callout-note
## Difference Between Conda and Pip

Long story short: ***Pip is for Python libraries only, while conda can install packages for any software (including python).***

It is generally recommended that you only use `conda install` when in a conda environment, as anything installed via pip won't be recognized by conda and vice versa.
Using the two interchangeably might overwrite or break packages and mess up the environment.

**What if the Python package is unavailable through conda?**

In these scenarios where the package you need is not built under conda, it makes sense to use pip to install packages within the conda environment.
The best practice is to ***install everything with conda first, then use pip if needed**.*

Check out this [blog](https://www.anaconda.com/blog/using-pip-in-a-conda-environment) for more information on using pip in a conda environment.
:::

You can also use Conda to create and manage virtual environments, install, or delete virtual environments.

# 3 Virtual Environments

Environments are **isolated, independent installations** of a programming language and groups of packages that don't interfere with each other.

For example, you may have a Python version 3.8 installed on your computer as the System Python.
Meanwhile, you can install as many virtual environments as you want with the same or different Python versions and set of packages.

You can switch between environments for different projects, create environment files and share them with others.

## Why virtual environments?

You may find the flexibility of environments useful in many cases.

-   **Avoid Conflicts**.
    When you need libraries that are not compatibles with your system settings, such as an older Python version or conflicting dependencies.
    Creating a virtual environment can resolve the conflicts and changing it won't affect your other environments.

-   **Sharing Environment Setting**.
    You can also share your environment and the list of dependencies with someone with a copy of the `environment.yaml` file.

-   **Easy Management**.
    When your work is temporary or that you simply want to experiment things without having to worry about things breaking, you can work within a virtual environment and later delete it when needed.

## ‚ñ∂Ô∏èFollow-Along: Create a Conda Virtual Environment

Alternatively, you can use the `conda` command line interface (CLI) to create virtual environments.

::: callout-tip
For users comfortable with command line, this approach is generally more recommended than Anaconda Navigator, as it is faster, more robust to broken environments (reported by some who used the GUI), and offers greater flexibility and functionality for environment management.
:::

1.  Create the virtual environment.

    ```         
    conda create --name <env-name>
    ```

    Replace `<env-name>` with the name you want to give your environment.

    *Note: you can use `-n` (shorthand) and `--name` interchangeably.*

2.  You can also specify the Python version and packages you want to install to your environment.

    ```         
    conda create -n <env-name> python=3.10 scipy=0.17.3 pandas matplotlib
    ```

    Or:

    ```         
    conda create -n <env-name> python=3.10
    conda install -n <env-name> scipy pandas matplotlib
    ```

    You can also specify channel other than the `defaults` channel (for multiple channels, pass the argument multiple times):

    ```         
    conda install -n <env-name> scipy --channel conda-forge --channel bioconda
    ```

3.  Now, activate your environment.

    ```         
    conda activate <env-name>
    ```

4.  You can also verify that your installation was successful by looking up the list of all current environments on your computer.

    ```         
    conda env list
    ```

    The default location for the installed conda environments (except for the base conda environment) is `..\anaconda3\envs\<env-name>`

5.  Deactivate the conda environment.

    Simply use `conda deactivate`.

    ::: callout-warning
    ## Note: Avoid activating on top of another virtual environment!

    Be careful when activating environments.
    Remember to always **deactivate the current environment before going into another one** because environments can be **stacked**.
    This can lead to chaos in the packages in both environments.
    So make sure that you see `(base)` at the beginning of the terminal prompt line when you are about to activate an environment.
    :::

6.  Removing an environment.

    -   Remove by environment name:

        ```         
        conda env remove -n <env-name>
        ```

    -   Remove by environment folder path:

        ```         
        conda env remove --prefix </path/to/your/env>
        ```

## 1.3.3 Creating an Environment from an `environment.yml` File

We can also create a virtual environment from a `.yml` file.

``` bash
conda env create -f environment.yml
```

Similarly, after installation, activate the new environment:

``` bash
conda activate <env-name>
```

This way, we can easily recreate an environment that is shared by others or share our environment settings with others.

For example, a simple environment file that has information about the environment name, channels, and dependencies:

```         
name: python310
channels:
  - defaults
dependencies:
  - python==3.10
  - pandas
  - numpy
```

Download the YML file for this Python workshop series [here](https://github.mskcc.org/Python-Workshop/Python-Workshop.github.io/tree/main/Downloadable/environment.yml).
This file includes the required channel and dependencies for completing the workshop sessions.

# 4 Integrated Development Environment

and preferably set up a coding software for more elegant and interactive programming‚Äìwe often call it the integrated development environment (IDE).

::: callout-note
Rstudio is an IDE developed to support coding in both R and Python languages, with integrated functionalities including:

-   Automatic syntax highlighting, code completion, and smart indentation.

-   Multi-panel layout to display coding scripts, console, environment variables, and plot side-by-side.

-   Support for RMarkdown and Quarto documents.

-   Project management through Rprojects and renv.
:::

Ther are many IDEs compatible with Python programming **Visual Studio Code JupyterLab** PyCharm, Spyder

| Tool | Description |
|---------------------|---------------------------------------------------|
| **VS Code** | Lightweight, powerful IDE (extensible with Python & Jupyter extensions) |
| **JupyterLab** | Interactive notebooks for analysis & reports |
| **Spyder** | RStudio-like interface, good for scientific Python |
| **PyCharm** | Full-featured Python IDE (more for software dev) |

## Visual Studio Code

![](images/vs-code-icon.png){width="100"}

> **Visual Studio Code (VS Code)** is one of the most popular open-source code editors with many features.

-   **Multi-Language Programming.** You can code in almost any major programming languages in VS Code including Python, R, C/C++, JavaScript, etc.
-   **Build-In Git Source Control.** VS Code automatically recognizes and uses the computer's Git installation to allow project version control. You can easily track changes, stage, and commit changes to your working branch.
-   **Variety of Project Development Support**. You can add extra features such as language packs, debugging tools, Git/Github features, and remote server connector by installing extensions from the Extension Marketplace.

Go to \[Work with Jupyter/Quarto in VS Code\] for guide on how to get started with VS Code.

## Quarto

![](images/quarto-icon.png){width="250"}

> **Quarto** is an open-source scientific and technical publishing system.

Think of Quarto `.qmd` as similar to R Markdown `.Rmd` files.
Both combine executable code chunks with text components and figures and allow generating outputs as PDF, HTML, Docx, and even slideshow presentations.

But Quarto has more:

-   **Compatibility with multiple IDEs**.
    You can not only work with Quarto `.qmd` in RStudio, but also VS Code, Jupyter Lab, etc.

-   **Mutli-lingual support**.
    Unlike R Markdown which is dependent on R, Quarto does not require R.
    It supports embedded Python, JavaScript, and Julia executable code by simply specifying the language name in the braces on top of a code chunk (e.g., ```` ```{python} ````).

-   **Multi-engine support**.
    Don't worry if you are an R Markdown or Jupyter Notebook user!
    Qurato also works with `.Rmd` and `.ipynb` files and will automatically deploy either the knitr or jupyter engine depending on the file type that you are rendering.

In summary, Quarto is easy for R users to transition into due to similarities with the R Markdown.
It also includes more functionality and flexibility, making it a great tool for learning Python.

::: callout-note
## Ecosystem of Python Programming

-   **Miniconda** provides a lightweight way to manage Python environments, similar to renv in R, ensuring dependency isolation without cluttering the global system.
    It simplifies package management, much like CRAN + Bioconductor, while also handling system-level dependencies.

-   **VS Code**, akin to RStudio, offers a powerful yet customizable IDE with Python-specific extensions, an interactive Jupyter notebook interface, and seamless Git integration.

-   Together, Miniconda and VS Code provide an efficient, modular setup, making Python adoption intuitive while maintaining the reproducibility and project structure familiar to R users.
:::

## ‚ñ∂Ô∏è **Follow-Along:** Set up Jupyter Notebook in VS Code

::: callout-note
## üí°Prerequisites

1.  Install **Conda**: Go to previous section \[2 Installation and Setup\].
2.  Install **VS Code**: [Download and install VS Code](https://code.visualstudio.com/download)
3.  Install **Quarto**: [Install from the official website](https://quarto.org/docs/get-started/)
4.  
:::

#### **Setting up VS Code**

1.  Open VS Code.

2.  **Install Extensions from Extension Marketplace.** Click **Extensions** from the left toolbar or click `Ctrl+Shift+X` (or `Cmd+Shift+X` on Mac).

    -   **Python**: To support Python language, debugging, documentations, etc.

    -   **Quarto**: To support Quarto document editing and previewing.

    -   **Jupyter**: To support rendering Python documents from Jupyter Notebooks or Quarto files.

    ::: callout-important
    You still need to install conda (Python) and Quarto to your computer to enable these extensions.
    :::

3.  **Create a Conda Virtual Environment.** You may also use existing ones you created.

    -   Required packages/dependencies (to install, use `conda install <package-name> ‚Äìchannel conda-forge`):

        -   jupyter
        -   ipykernel
        -   pyyaml

    -   **Note**: we recommend installing an environment from this [YML file](https://github.mskcc.org/Python-Workshop/Python-Workshop.github.io/tree/main/Downloadable/environment.yml).
        See \[1.3.3 Creating an Environment from an environment.yml File\] for detailed instructions.

4.  **Configure the Environment in VS Code.**

    1.  Open Command Palette by pressing `Ctrl+Shift+P` (or `Cmd+Shift+X` on Mac).

    2.  Type "**Python: Select Interpreter**".

    3.  Choose the Conda python environment you created.
        If you don't see its name pop up, choose **Enter interpreter path...** and manually type in the location of your conda virtual environment python executable.

        E.g., `C:\Users\<username>\AppData\Local\anaconda3\envs\<env-name>\python.exe` for Windows **or** `Users/<username>/anaconda/envs/<env-name>/python` for macOS.

        ::: callout-note
        ## Find your conda Python executable path

        You can search for the conda Python interpreter location on your computer.
        Here is an example of how to do it using command line.

        For both Windows and macOS, open the **Anaconda Prompt** or **terminal** and activate the conda Python environment with `conda activate <env-name>`.

        Then, locate your Python executable by typing the following:

        -   Windows: `where python`

        -   macOS: `which python`
        :::

Now you are ready to go.
Let's start with creating a new Quarto file.

## Excercise: Create a Quarto File

Go to **`File > New File`** and select Quarto Document.
This will generate an empty `.qmd` file with the following YAML metadata.
You can change the title and file output format as needed.

``` markdown
---
title: "First Day"
format: html
---
```

In Quarto files, you can mix Markdown with code blocks just like in R Markdown.
For example:

``` markdown
# Heading 1
This is a demo Quarto file. Here is the text section.

## Heading 2
This is a subsection.
```

To add an executable code block, specify the language name inside two curly braces (e.g., `{python}`, `{r}`, etc.).
For example, let's print something:

```` markdown
```{{python}}
print("This is some Python output.")
```
````

```{python}
# | echo: false
print("This is some Python output.")
```

#### File Previewing

To preview the html output, click on the **Quarto Preview** button at the top right (or press `Ctrl+Shift+K`).

Alternatively, run `quarto preview` in your terminal to view the output.

``` bash
quarto preview <yourfilename>.qmd
```

This is an example of the html output preview showing next to the source `.qmd` file.

![](images/quarto-demo.png)

#### File Rendering/ Exporting to other Formats

To save the output, use **Quarto: Render Document** from the command search bar (`Ctrl+Shift+P`).

![](images/quarto-render.png){fig-align="left" width="900"}

Then select the desired output format.
For example, Render HTML.

![](images/quarto-render2.png){width="900"}

Similarly, you can use command line `quarto render` in the terminal to save the output.

``` bash
quarto render <yourfilename>.qmd
```

Now you should see a `<yourfilename>.html` file generated in your working directory.

# Next session